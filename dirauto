#!/bin/bash

#================================================================
# HEADER
#================================================================
# Script Name   : dirauto
# Description   : Customizable directory scan that enumerates 
# 		:  subdomain through content-discovery
# Author        : Eliaz Simon
# Date          : <INSERT DATE HERE>
# Version       : 1.0
# Usage         : ./dirauto -i <target_host>
# Notes         : Ensure you install all tools to use this script
# Dependencies  : See README.md for more info on installation
#================================================================
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#================================================================

# Capture the current time
current_time=$(date +"%T")

###############################################################
# ANSI Color Code Escape Sequences			      #
###############################################################
BLACK="\e[30m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
LIGHT_GRAY="\e[37m"
GRAY="\e[90m"
LIGHT_RED="\e[91m"
LIGHT_GREEN="\e[92m"
LIGHT_YELLOW="\e[93m"
LIGHT_BLUE="\e[94m"
LIGHT_MAGENTA="\e[95m"
LIGHT_CYAN="\e[96m"
WHITE="\e[97m"
ENDCOLOR="\e[0m"

# Bold 
BOLD_BLACK="\e[1;30m"
BOLD_RED="\e[1;31m"
BOLD_GREEN="\e[1;32m"
BOLD_YELLOW="\e[1;33m"
BOLD_BLUE="\e[1;34m"
BOLD_MAGENTA="\e[1;35m"
BOLD_CYAN="\e[1;36m"
BOLD_LIGHT_GRAY="\e[1;37m"
BOLD_GRAY="\e[1;90m"
BOLD_LIGHT_RED="\e[1;91m"
BOLD_LIGHT_GREEN="\e[1;92m"
BOLD_LIGHT_YELLOW="\e[1;93m"
BOLD_LIGHT_BLUE="\e[1;94m"
BOLD_LIGHT_MAGENTA="\e[1;95m"
BOLD_LIGHT_CYAN="\e[1;96m"
BOLD_WHITE="\e[1;97m"

# Italic
ITALIC_BLACK="\e[3;30m"
ITALIC_RED="\e[3;31m"
ITALIC_GREEN="\e[3;32m"
ITALIC_YELLOW="\e[3;33m"
ITALIC_BLUE="\e[3;34m"
ITALIC_MAGENTA="\e[3;35m"
ITALIC_CYAN="\e[3;36m"
ITALIC_LIGHT_GRAY="\e[3;37m"
ITALIC_GRAY="\e[3;90m"
ITALIC_LIGHT_RED="\e[3;91m"
ITALIC_LIGHT_GREEN="\e[3;92m"
ITALIC_LIGHT_YELLOW="\e[3;93m"
ITALIC_LIGHT_BLUE="\e[3;94m"
ITALIC_LIGHT_MAGENTA="\e[3;95m"
ITALIC_LIGHT_CYAN="\e[3;96m"
ITALIC_WHITE="\e[3;97m"

# Background Color
BLACK_BG="\e[40m"
RED_BG="\e[41m"
GREEN_BG="\e[42m"
YELLOW_BG="\e[43m"
BLUE_BG="\e[44m"
MAGENTA_BG="\e[45m"
CYAN_BG="\e[46m"
WHITE_BG="\e[47m"

# Styles
BOLD="\e[1m"
ITALIC="\e[3m"

# Banner
echo "
┳┓•  ┏┓     
┃┃┓┏┓┣┫┓┏╋┏┓
┻┛┗┛ ┛┗┗┻┗┗┛
"

#================================================================
# FUNCTION: info
# DESCRIPTION:
#     Prints info message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
info() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: important_info
# DESCRIPTION:
#     Prints important info message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
important_info() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: success
# DESCRIPTION:
#     Prints success message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
success() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}SUCCESS${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: warning
# DESCRIPTION:
#     Prints warning message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
warning() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: important_warning
# DESCRIPTION:
#     Prints important warning message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
important_warning() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: print_usage
# DESCRIPTION:
#     Prints error message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
error() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: print_usage
# DESCRIPTION:
#     Prints important error message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
important_error() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}$1${ENDCOLOR}\n"
}

###############################################################
# Help & Usage                                                # 
###############################################################
#================================================================
# FUNCTION: usage
# DESCRIPTION:
#     Prints default usage information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto [modes] [-u, --url] [options]"
	echo " "
}

#================================================================
# FUNCTION: help
# DESCRIPTION:
#     Prints default help information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
help()
{
	usage
        echo "Options:"
       	printf "  ${BOLD}--usage${ENDCOLOR}			Show usage information\n"
        printf "  ${BOLD}-h, --help${ENDCOLOR}			Show help message\n"
        printf "  ${BOLD}-u, --url${ENDCOLOR}			Specify target URL\n"
        printf "  ${BOLD}-x, --extensions${ENDCOLOR}		Specify extensions\n"
        printf "  ${BOLD}-c, --status-codes${ENDCOLOR}		Specify status codes\n"
        printf "  ${BOLD}-e, --extension-rate${ENDCOLOR}		Specify extension rate\n"
        printf "  ${BOLD}-t, --threads${ENDCOLOR}			Specify number of threads\n"
        printf "  ${BOLD}-w, --wordlist${ENDCOLOR}		Specify wordlist\n"
        printf "  ${BOLD}--check${ENDCOLOR}			Check if repositories are installed\n"
        printf "  ${BOLD}-i, --install${ENDCOLOR}			Install repositories\n"
        echo " "
        echo "Modes:"
        printf "  ${BOLD}dir${ENDCOLOR}				Directory Mode\n"
        printf "  ${BOLD}vhost${ENDCOLOR}				Virtual Host Mode\n"
        printf "  ${BOLD}subdomain${ENDCOLOR}			Subdomain Mode\n"
	exit 0
}

#================================================================
# FUNCTION: dir_usage
# DESCRIPTION:
#     Prints directory usage information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dir_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto dir [-u, --url] [modes]"
	echo " "
}

#================================================================
# FUNCTION: dir_help
# DESCRIPTION:
#     Prints directory help information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dir_help() {
	dir_usage
        echo "Directory mode help:"
       	printf "  ${BOLD}--usage${ENDCOLOR}				Show usage information\n"
        printf "  ${BOLD}-h, --help${ENDCOLOR}				Show help information\n"
        printf "  ${BOLD}-u, --url <URL>${ENDCOLOR}			Specify target URL\n"
        printf "  ${BOLD}-x, --extensions <ext>${ENDCOLOR}		Specify file extensions\n"
        printf "  ${BOLD}-c, --status-codes <codes>${ENDCOLOR}		Specify Status Codes\n"
        printf "  ${BOLD}-t, --threads <threads>${ENDCOLOR}		Specify number of threads\n"
        printf "  ${BOLD}-e, --execution-rate <rate>${ENDCOLOR}		Specify execution rate\n"
        printf "  ${BOLD}-w, --wordlist <file>${ENDCOLOR}			Specify wordlist\n"
        printf "  ${BOLD}--auto${ENDCOLOR}				Enable auto mode\n"
        echo " "
	exit 0
}

#================================================================
# FUNCTION: vhost_usage
# DESCRIPTION:
#     Prints virtual host usage information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
vhost_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto vhost [-u, --url] [modes]"
	echo " "
}

#================================================================
# FUNCTION: vhost_help
# DESCRIPTION:
#     Prints virtual host help information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
vhost_help() {
	vhost_usage
        echo "Virtual host mode help:"
       	printf "  ${BOLD}--usage${ENDCOLOR}				Show usage information\n"
        printf "  ${BOLD}-h, --help${ENDCOLOR}				Show help information\n"
        printf "  ${BOLD}-u, --url <URL>${ENDCOLOR}			Specify target URL\n"
        printf "  ${BOLD}-x, --extensions <ext>${ENDCOLOR}		Specify file extensions\n"
        printf "  ${BOLD}-c, --status-codes <codes>${ENDCOLOR}		Specify Status Codes\n"
        printf "  ${BOLD}-t, --threads <threads>${ENDCOLOR}		Specify number of threads\n"
        printf "  ${BOLD}-e, --execution-rate <rate>${ENDCOLOR}		Specify execution rate\n"
        printf "  ${BOLD}-w, --wordlist <file>${ENDCOLOR}			Specify wordlist\n"
        printf "  ${BOLD}--auto${ENDCOLOR}				Enable auto mode\n"
        echo " "
	exit 0
}

#================================================================
# FUNCTION: dns_usage
# DESCRIPTION:
#     Prints DNS / subdomain usage information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dns_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto subdomain [-u, --url] [modes]"
	echo " "
}

#================================================================
# FUNCTION: dns_help
# DESCRIPTION:
#     Prints DNS / subdomain help information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dns_help() { 
	dns_usage
        echo "DNS mode help:"
       	printf "  ${BOLD}--usage${ENDCOLOR}			Show usage information\n"
        printf "  ${BOLD}-h, --help${ENDCOLOR}			Show help information\n"
        printf "  ${BOLD}-u, --url${ENDCOLOR}			Specify target URL\n"
        printf "  ${BOLD}-x, --extensions${ENDCOLOR}		Specify file extensions\n"
        printf "  ${BOLD}-c, --status-codes${ENDCOLOR}		Specify status codes\n"
        printf "  ${BOLD}-t, --threads${ENDCOLOR}			Specify number of threads\n"
        printf "  ${BOLD}-e, --execution-rate${ENDCOLOR}		Specify execution rate\n"
        printf "  ${BOLD}-w, --wordlist${ENDCOLOR}		Specify wordlist\n"
        printf "  ${BOLD}--auto${ENDCOLOR}			Enable auto mode\n"
        echo " "
	exit 0
}

# ===========================================================================
# Checking Conditions... 
# ===========================================================================
# ---------------------------------------------------------------------------
# Repositories Check
# ---------------------------------------------------------------------------
#================================================================
# FUNCTION: check
# DESCRIPTION:
#     Checks third-party programs are located in /usr/bin directory.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
check() {
	if ! [-f /usr/bin/gobuster ]; then
		error "Gobuster is not located in /usr/bin. Install Gobuster."
		exit 1
	fi 
	info "Gobuster installed."

	if ! [-f /usr/bin/ffuf ]; then
		error "FFuF is not located in /usr/bin. Install FFuF."
		exit 1
	fi 
	info "FFuF installed."

	if ! [-f /usr/bin/feroxbuster ]; then
		error "FeroxBuster is not located in /usr/bin. Install FeroxBuster."
		exit 1
	fi 
	info "Feroxbuster installed."

	if ! [-f /usr/bin/dirsearch ]; then
		error "Dirsearch is not located in /usr/bin. Install Dirsearch."
		exit 1
	fi 
	info "Dirsearch installed."

	if ! [-f /usr/bin/dirb ]; then
		error "Dirb is not located in /usr/bin. Install Dirb,"
		exit 1
	fi 
	info "Dirb installed."

	if ! [ -d /usr/share/seclists ] || [ -d /usr/share/wordlist/seclists ]; then
		error "Seclists is not located in /usr/share directory. Install Seclists."
		exit 1
	fi 
	info "Seclists installed."

	echo " "

	success "All of the programs are installed in your system. You are ready to enumerate!"

	exit 1
}

###############################################################
# Printing output options...                                  #
###############################################################
#================================================================
# FUNCTION: search_wordlist
# DESCRIPTION:
#     Search the name of wordlist through /usr/share/seclists directory.
# PARAMETERS:
#     $1 - Specified wordlist
# RETURNS:
#     None
#================================================================
search_wordlist() {
	local wordlist_name="$1"

	wordlist_path=$(find /usr/share/seclists -type f -name "$wordlist_name" 2>/dev/null | head -n 1)

    	if [ -n "$wordlist_path" ]; then
		echo $wordlist_path
		return 0
	else 
		return 1
	fi
}

#================================================================
# FUNCTION: input_check
# DESCRIPTION:
#     Checks global variables that are specified before scan
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
input_check() {
	# ---------------------------------------------------------------------------
	# Target URL
	# ---------------------------------------------------------------------------
	if [ -z "$URL" ]; then
		error "Missing URL address. Please specify the URL using the -u or --url option."
		exit 1
	fi
	important_info "Target: $URL"

	# ---------------------------------------------------------------------------
	# PROGRAMS
	# ---------------------------------------------------------------------------
	if [ -z "$PROGRAMS" ]; then
		error "Enumeration program not selected."	
		exit 1
	fi

	match_found=0
	enumeration_programs=("gobuster" "ffuf" "feroxbuster" "dirsearch" "dirb")
	IFS="," read -r -a ENUMERATION_PROGRAMS <<< "$PROGRAMS"
	for program in ${ENUMERATION_PROGRAMS[@]}; do
		info "Enumeration Program selected: $program"
		match_found=1
	done
	if [[ $match_found -eq 0 ]]; then
		error "The program you specified does not match with any other enumeration programs listed from this script."
		exit 1
	fi

	# ---------------------------------------------------------------------------
	# HOST (VHOST MODE)
	# ---------------------------------------------------------------------------
	if [[ -n "$HOST" ]]; then
		if echo "$PROGRAMS" | grep -q "\bffuf\b"; then
			if ! echo "$HOST" | grep -q "\bFUZZ\b"; then
				error "Host string must contain the word 'FUZZ' in order to enumerate subdomains"
				exit 1
			fi	
		fi
	fi
	info "Host (FFuF): $HOST"

	# ---------------------------------------------------------------------------
	# WORDLIST
	# ---------------------------------------------------------------------------
	if [[ -n "$WORDLISTS" ]]; then
		if ! [ -d /usr/share/seclists ] || [ -d /usr/share/wordlist/seclists ]; then
			error "Seclists is not located in /usr/share directory. Install Seclists."
			exit 1
		fi 

		# Loop through each wordlist from here before initializing
		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	
			if [ -z "$wordlist_path" ]; then
				error "Wordlist not found."
				exit 1
			fi
			info "Found selected wordlist: $wordlist_path"
		done
	else 
		error "Wordlist has not been selected."
		exit 1
	fi

	# ---------------------------------------------------------------------------
	# EXTENSIONS
	# ---------------------------------------------------------------------------
	if [[ -n "$EXTENSIONS" ]]; then
		if ! [[ $EXTENSIONS =~ ^[a-zA-Z0-9.,]+$ ]]; then
			error "Status codes must not contain any special characters"
			exit 1
		fi	
	fi
	info "Extensions: $EXTENSIONS"

	# ---------------------------------------------------------------------------
	# STATUS CODES
	# ---------------------------------------------------------------------------
	if [[ -n "$STATUS_CODES" ]]; then
		if ! [[ $STATUS_CODES =~ ^[0-9]+$ ]]; then
			error "Status codes must contain only integer and the following charater ',' for separation"
			exit 1
		fi	
	fi
	info "Status Codes: $STATUS_CODES"

	# ---------------------------------------------------------------------------
	# EXECUTION RATE
	# ---------------------------------------------------------------------------
	if [[ -n "$EXECUTION_RATE" ]]; then
		if ! [[ $EXECUTION_RATE =~ ^[0-9]+$ ]]; then
			error "Execution rate must only accept integers"
			exit 1
		fi	
	fi
	info "Execution Rate: $EXECUTION_RATE"

	# ---------------------------------------------------------------------------
	# THREADS
	# ---------------------------------------------------------------------------
	if [[ -n "$THREADS" ]]; then
		if ! [[ $THREADS =~ ^[0-9]+$ ]]; then
			error "Threads must contain only integers"
			exit 1
		fi	
	fi
	info "Threads: $THREADS"

	# ---------------------------------------------------------------------------
	# RESPONSE / CONTENT SIZE
	# ---------------------------------------------------------------------------
	if [[ -n "$CONTENT_SIZE" ]]; then
		if ! [[ $CONTENT_SIZE =~ ^[0-9]+$  || $CONTENT_SIZE =~ ^[0-9]+,[0-9]+$ ]]; then
			error "Content size must contain only integers"
			exit 1
		fi	
	fi
	info "Exclude Content Size: $CONTENT_SIZE"

}

#================================================================
# FUNCTION: directory_check
# DESCRIPTION:
#     Checks if a created directory path exists on the system for scan.
# PARAMETERS:
#     $1 - The directory path
#     $2 - The name of the scan
# RETURNS:
#     None
#================================================================
directory_check() {
	local path=$1
	local scan=$2

	if [[ -d $1 ]]; then
		echo " "
		info "Created $2 output directory of target live host under '$1'"
	else
		echo " "
		warning "Failed to create $2 output directory of target live host under '$1'"
	fi
}

#================================================================
# FUNCTION: file_check
# DESCRIPTION:
#     Checks if a generated file exists on the system for scan.
# PARAMETERS:
#     $1 - The file path
#     $2 - The name of the scan
# RETURNS:
#     None
#================================================================
file_check() {
	local path=$1
	local scan=$2

	if [[ -e $1 ]]; then
		echo " "
		success "Generated output data for $2 of target live host under '$1'"
	else
		echo " "
		warning "Failed to generate output data for $2 of target live host under '$1'"
	fi
}

###############################################################
# Directory Enumeration Selection Option                      #
###############################################################
#================================================================
# FUNCTION: auto_dir_scan
# DESCRIPTION:
#     Performs automatic directory scan on target URL.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
auto_dir_scan() {
	info "Automatic Directory Enumeration Scan Enabled.."

	mkdir -p Dirauto/dir/Gobuster
	mkdir -p Dirauto/dir/Feroxbuster

	info "Started Automatic Directory Enumeration Scan"
	info "Initializing Gobuster..."

	common_path=$(search_wordlist "common.txt")
	if [ -z "$common_path" ]; then
		error "common.txt wordlist not found"
	else
		info "Found common.txt wordlist"
		gobuster dir -u $URL -w $common_path -o $(pwd)/Dirauto/dir/Auto/Gobuster/common.txt
	fi

	echo " "

	raft_medium_directories_path=$(search_wordlist "raft-medium-directories.txt")
	if [ -z "$raft_medium_directories_path" ]; then
		error "raft-medium-directories.txt wordlist not found"
	else 
		info "Found raft-medium-directories.txt wordlist"
		info "Initializing Feroxbuster..."
		feroxbuster -u $URL --output $(pwd)/Dirauto/dir/Auto/Feroxbuster/feroxbuster.txt
	fi

	echo " "

	info "Completed Automatic Directory Enumeration Scan"
}

#================================================================
# FUNCTION: auto_vhost_scan
# DESCRIPTION:
#     Performs automatic vhost scan on target URL.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
auto_vhost_scan() {
	info "Automatic Virtual Host Enumeration Scan Enabled.."

	mkdir -p Dirauto/vhost/Auto/Gobuster
	mkdir -p Dirauto/vhost/Auto/FFuF

	info "Started Automatic Virtual Host Enumeration Scan"
	info "Initializing Gobuster..."

	subdomains_5000_path=$(search_wordlist "subdomains-top1million-5000.txt")
	if [ -z "$subdomains_5000_path" ]; then
		error "subdomains-top1million-5000.txt wordlist not found"
	else
		info "Found subdomains-top1million-5000.txt wordlist"

		gobuster_command="gobuster vhost -u $URL -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt"
		if [ -n "$EXCLUDE_CONTENT_LENGTH" ]; then
			gobuster_command+=" --exclude-length $EXCLUDE_CONTENT_LENGTH"
		fi

		echo "$gobuster_command"
		eval "$gobuster_command"

		echo " "

		# ============================== 

		ffuf_command="ffuf -u $URL -H \"$HOST\" -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -o $(pwd)/Dirauto/vhost/Auto/FFuF/subdomains-top1million-5000.txt"

		if [ -n "$EXCLUDE_CONTENT_LENGTH" ]; then
			ffuf_command+=" -fs $EXCLUDE_CONTENT_LENGTH"
		fi

		printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Initializing FFuF...\n"

		eval "$ffuf_command"
	fi

	echo " "

	info "Completed Automatic Virtual Host Enumeration Scan"

}

#================================================================
# FUNCTION: auto_dns_scan
# DESCRIPTION:
#     Performs DNS scan on target host.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
auto_dns_scan() {
	info "Automatic DNS Enumeration Scan Enabled.."

	mkdir -p Dirauto/dns/Auto/dig
	mkdir -p Dirauto/dns/Auto/Gobuster

	info "Started Automatic DNS Enumeration Scan"
	info "Gathering DNS information from DNS server..."

	if [ -z "$DOMAIN_NAME" ]; then
		error "Domain name is required to gather DNS information"
	else
		dig_command="dig axfr $DOMAIN_NAME @$URL | tee $(pwd)/Dirauto/dns/Auto/dig/dig.txt"	
		echo "$dig_command"
		eval "$dig_command"

		echo " "
	fi	

	info "Initializing Gobuster..."
	subdomains_path=$(search_wordlist "subdomains-top1million-20000.txt")
	if [ -z "$subdomains_path" ]; then
		error "subdomains-top1million-5000.txt wordlist not found"
	else
		info "Found subdomains-top1million-5000.txt wordlist"

		# gobuster_command="gobuster dns -d $DOMAIN_NAME -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -o $(pwd)/Dirauto/dns/Auto/Gobuster/subdomains-top1million-20000.txt"
		gobuster_command="gobuster vhost -u http://$DOMAIN_NAME --append-domain -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -o $(pwd)/Dirauto/dns/Auto/Gobuster/subdomains-top1million-5000.txt"

		echo "$gobuster_command"
		eval "$gobuster_command"
	fi
}

###############################################################
# Enumeration Programs                                        #
###############################################################
#================================================================
# FUNCTION: run_gobuster
# DESCRIPTION:
#     Performs selected enumeration scan using GoBuster.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_gobuster() {
	if [ "$OPTION" == "dir" ]; then
		mkdir -p Dirauto/manual/dir/gobuster
		directory_check "$(pwd)/Dirauto/manual/dir/gobuster" "manual GoBuster directory"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dir/gobuster/$wordlist"

			command="gobuster dir -u $URL -w $wordlist_path -o $(pwd)/Dirauto/manual/dir/gobuster/$wordlist"

			if [ -n "$EXTENSIONS" ]; then
				command+=" -x $EXTENSIONS"	
			fi
			
			if [ -n "$RESPONSE_CODES" ]; then
				command+=" -s $RESPONSE_CODES"	
			fi

			eval "$command"
			
			file_check "$(pwd)/Dirauto/manual/dir/gobuster/$wordlist" "GoBuster directory scan"

		done
	fi

	if [ "$OPTION" == "vhost" ]; then
		mkdir -p Dirauto/manual/vhost/gobuster
		directory_check "$(pwd)/Dirauto/manual/vhost/gobuster" "manual GoBuster vhost"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/vhost/gobuster/$wordlist"

			command="gobuster vhost -u $URL -w $wordlist_path -o $(pwd)/Dirauto/manual/vhost/gobuster/$wordlist"

			if [ -n "$EXECUTION_RATE" ]; then
				command+=" -t $EXECUTION_RATE"	
			fi

			if [ -n "$CONTENT_SIZE" ]; then
				command+=" --exclude-length $CONTENT_SIZE"	
			fi

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/vhost/gobuster/$wordlist" "GoBuster vhost scan"
		done
	fi

	if [ "$OPTION" == "dns" ]; then
		mkdir -p Dirauto/manual/dns/gobuster
		directory_check "$(pwd)/Dirauto/manual/dns/gobuster" "manual GoBuster dns"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dns/gobuster/$wordlist"

			command="gobuster dns -d $URL -w $wordlist -i -o $(pwd)/Dirauto/manual/dns/gobuster/$wordlist"

			if [ -n "$EXECUTION_RATE" ]; then
				command+=" -t $EXECUTION_RATE"	
			fi

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dns/gobuster/$wordlist" "GoBuster dns scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

#================================================================
# FUNCTION: run_FFuF
# DESCRIPTION:
#     Performs selected enumeration scan using FFuF.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_FFuF() {
	if [ "$OPTION" == "dir" ]; then
		mkdir -p Dirauto/manual/dir/ffuf
		directory_check "$(pwd)/Dirauto/manual/dir/ffuf" "manual FFuF directory"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	
			
			touch "$(pwd)/Dirauto/manual/dir/ffuf/$wordlist"

			command="ffuf -c -w $wordlist_path -u $URL/FUZZ -o $(pwd)/Dirauto/manual/dir/ffuf/$wordlist"
			
			if [ -n "$EXTENSIONS" ]; then
				command+=" -e $EXTENSIONS"
			fi 

			if [ -n "$RESPONSE_CODES" ]; then
				command+=" -mc $RESPONSE_CODES"
			fi 

			if [ -n "$EXECUTION_RATE" ]; then
				command+=" -t $EXECUTION_RATE"
			fi 
			
			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dir/ffuf/$wordlist" "FFuF directory scan"
		done
	fi
	
	if [ "$OPTION" == "vhost" ]; then
		# Add option for domain name
		# Review this section over here
		echo "Enter the name of the header for FUZZING (Example: \"Host: FUZZ.ffuf.com \"): "	
		read headerInput

		mkdir -p Dirauto/manual/vhost/ffuf
		directory_check "$(pwd)/Dirauto/manual/vhost/ffuf" "manual FFuF vhost"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/vhost/ffuf/$wordlist"	

			command="ffuf -c -w $wordlist -H \"$headerInput\" -u $URL -o $(pwd)/Dirauto/manual/vhost/ffuf/$wordlist"

			if [ -n "$EXECUTION_RATE" ]; then
				command+=" -t $EXECUTION_RATE"
			fi 

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/vhost/ffuf/$wordlist" "FFuF vhost scan"
		done
	fi

	if [ "$OPTION" == "dns" ]; then
		mkdir -p Dirauto/manual/dns/ffuf
		directory_check "$(pwd)/Dirauto/manual/dns/ffuf" "manual FFuF dns"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	
	
			touch "$(pwd)/Dirauto/manual/dns/ffuf/$wordlist"

			command="ffuf -c -w $wordlist -u $URL -H \"Host: FUZZ\" -o $(pwd)/Dirauto/manual/dns/ffuf/$wordlist"
		
			if [ -n "$EXECUTION_RATE" ]; then
				command+=" -t $EXECUTION_RATE"
			fi 

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dns/ffuf/$wordlist" "FFuF dns scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

#================================================================
# FUNCTION: run_dirsearch
# DESCRIPTION:
#     Performs selected enumeration scan using DirSearch.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_dirsearch() {
	local OPTION="$1"

	if [ "$OPTION" == "dir" ]; then
		mkdir -p Dirauto/manual/dir/dirsearch
		directory_check "$(pwd)/Dirauto/manual/dir/dirsearch" "manual dirsearch directory"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dir/dirsearch/$wordlist"	

			command="dirsearch -u $URL -w $wordlist_path -o $(pwd)/Dirauto/manual/dir/dirsearch/$wordlist"

			if [ -n "$EXTENSIONS" ]; then
				command+=" -e $EXTENSIONS"
			fi 

			if [ -n "$RESPONSE_CODES" ]; then
				command+=" -i $RESPONSE_CODES"
			fi 

			if [ -n "$EXECUTION_RATE" ]; then
				command+=" -t $EXECUTION_RATE"
			fi 

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dir/dirsearch/$wordlist" "FFuF directory scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

#================================================================
# FUNCTION: run_feroxbuster
# DESCRIPTION:
#     Performs selected enumeration scan using FeroxBuster.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_feroxbuster() {
	local OPTION="$1"

	if [ "$OPTION" == "dir" ]; then
		mkdir -p Dirauto/manual/dir/feroxbuster
		directory_check "$(pwd)/Dirauto/manual/dir/feroxbuster" "manual feroxbuster directory"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dir/feroxbuster/$wordlist"
				
			command="feroxbuster --url $URL --wordlist $wordlist_path --output $(pwd)/Dirauto/manual/dir/feroxbuster/$wordlist"	

			if [ -n "$EXTENSIONS" ]; then
				command+=" -x $EXTENSIONS"
			fi 

			if [ -n "$EXECUTION_RATE" ]; then
				command+=" -t $EXECUTION_RATE"
			fi 

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dir/feroxbuster/$wordlist" "FeroxBuster directory scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

#================================================================
# FUNCTION: run_dirb
# DESCRIPTION:
#     Performs selected enumeration scan using FeroxBuster.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_dirb() {
	mkdir -p Dirauto/manual/dir/dirb
	directory_check "$(pwd)/Dirauto/manual/dir/dirb" "manual dirb directory"

	if [ "$OPTION" == "dir" ]; then
		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dir/dirb/$wordlist"

			command="dirb $URL -w $wordlist_path -o $(pwd)/Dirauto/manual/dir/dirb/$wordlist"

			if [ -n "$EXTENSIONS" ]; then
				command+=" -X $EXTENSIONS"
			fi 

			eval "$command"

			file_check "$(pwd)/Dirauto/dir/manual/dirb/$wordlist" "Dirb directory scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

# ---------------------------------------------------------------------------
# MODES
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# Directory Mode
# ---------------------------------------------------------------------------
#================================================================
# FUNCTION: dir_mode
# DESCRIPTION:
#     Processes parameters in directory mode.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dir_mode() {
	while [[ "$#" -gt 0 ]]; do
		case $1 in
			-h|--help) dir_help ;;
			--usage) dir_usage ;;
			-u|--url) URL="$2"; shift ;;
			-p|--programs) PROGRAMS="$2"; shift ;;
			-x|--extensions) EXTENSIONS="$2"; shift ;;
			-c|--status-codes) STATUS_CODES="$2"; shift ;;
			-t|--threads) THREADS="$2"; shift ;;
			-w|--wordlists) WORDLISTS="$2"; shift ;;
			--auto) AUTO=true; shift ;; 
			*) error "Unknown Paramter Passed: $1"; exist 1 ;;
		esac
		shift
	done

	input_check

	OPTION="dir"

	info "Initialized Directory Mode"

	run_program

	success "Completed Directory Mode"

	exit 0
}

# ---------------------------------------------------------------------------
# Subdomain Mode
# ---------------------------------------------------------------------------
#================================================================
# FUNCTION: dns_mode
# DESCRIPTION:
#     Processes parameters in DNS / Subdomain mode.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dns_mode() {
	while [[ "$#" -gt 0 ]]; do
		case $1 in
			-h|--help) dns_help ;;
			--usage) dns_usage ;;
			-u|--url) URL="$2"; shift ;;
			-p|--programs) PROGRAMS="$2"; shift ;;
			-x|--extensions) EXTENSIONS="$2"; shift ;;
			-c|--status-codes) STATUS_CODES="$2"; shift ;;
			-t|--threads) THREADS="$2"; shift ;;
			-w|--wordlists) WORDLIST="$2"; shift ;;
			--auto) AUTO=true ;; 
			-d|--domain)DOMAIN_NAME="$2"; shift ;;
			-fs) CONTENT_SIZE="$2"; shift ;;
			*) error "Unknown Parameter Passed: $1"; exit 1 ;;
		esac
		shift
	done

	input_check

	OPTION="dns"

	info "Initialized DNS Mode"

	run_program

	success "Completed Subdomain Mode"

	exit 0
}

# ---------------------------------------------------------------------------
# Virtual Host Mode
# ---------------------------------------------------------------------------
#================================================================
# FUNCTION: vhost_mode
# DESCRIPTION:
#     Processes parameters in virtual host mode.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
vhost_mode() {
	while [[ "$#" -gt 0 ]]; do
		case $1 in
			-h|--help) vhost_help ;;
			--usage) vhost_usage ;;
			-u|--url) URL="$2"; shift ;;
			-p|--programs) PROGRAMS="$2"; shift ;;
			-x|--extensions) EXTENSIONS="$2"; shift ;;
			-c|--status-codes) STATUS_CODES="$2"; shift ;;
			-t|--threads) THREADS="$2"; shift ;;
			-w|--wordlists) WORDLISTS="$2"; shift ;;
			--auto) AUTO=true ;; 
			-H) HOST="$2"; shift ;;
			-fs) CONTENT_SIZE="$2"; shift ;;
			*) error "Unknown parameter passed: $1"; exit 1 ;;
		esac
		shift
	done

	input_check

	OPTION="vhost"

	info "Initialized VHost Mode"

	if [ "$AUTO" == "true" ]; then
		if [ -z "$HOST" ]; then
			error "Host name empty"
			exit 1
		fi 		
		auto_vhost_scan
	fi

	run_program

	info "Completed VHost Mode"

	exit 1
}

#================================================================
# FUNCTION: run_program
# DESCRIPTION:
#     Processes parameters in virtual host mode.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_program() {
	if [[ "$PROGRAMS" == "gobuster" ]]; then run_gobuster fi
	if [[ "$PROGRAMS" == "ffuf" ]]; then run_FFuF fi
	if [[ "$PROGRAMS" == "feroxbuster" ]]; then run_feroxbuster fi
	if [[ "$PROGRAMS" == "dirsearch" ]]; then run_dirsearch fi
	if [[ "$PROGRAMS" == "dirb" ]]; then run_dirb fi
}

###############################################################
# Arguments                                                   #
###############################################################
if [ $# -eq 0 ];
then 
	usage
        exit 1
fi

# Global Arguments
URL=""
OPTION=""
PROGRAMS=""
EXTENSIONS=""
STATUS_CODES=""
THREADS=""
EXECUTION_RATE=""
WORDLISTS=""
AUTO=false

# VHost Arguments
HOST=""
CONTENT_LENGTH=""

# DNS Arguments
DOMAIN_NAME=""

while [[ "$#" -gt 0 ]]; do
	case $1 in
		-h|--help) help ;;
		--usage) usage ;;
		-u|--url) URL="$2"; shift ;;
		-x|--extensions) EXTENSIONS="$2"; shift ;;
		-c|--status-codes) STATUS_CODES="$2"; shift ;;
		dir) shift; dir_mode "$@"; break ;;
		vhost) shift; vhost_mode "$@"; break ;;
		dns) shift; dns_mode "$@"; break ;;
		-t|--threads) THREADS="$2"; shift ;;
		-w|--wordlists) WORDLISTS="$2"; shift ;;
		--check) check ;;
		*) error "Unknown parameter passed: $1"; exit 1 ;;
	esac
	shift
done

