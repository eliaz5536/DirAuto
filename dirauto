#!/bin/bash

###############################################################
# Color Codes 				 	      	      # 
###############################################################
BLACK="\e[30m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
LIGHT_GRAY="\e[37m"
GRAY="\e[90m"
LIGHT_RED="\e[91m"
LIGHT_GREEN="\e[92m"
LIGHT_YELLOW="\e[93m"
LIGHT_BLUE="\e[94m"
LIGHT_MAGENTA="\e[95m"
LIGHT_CYAN="\e[96m"
WHITE="\e[97m"
ENDCOLOR="\e[0m"

# Background Color
BLACK_BG="\e[40m"
RED_BG="\e[41m"
GREEN_BG="\e[42m"
YELLOW_BG="\e[43m"
BLUE_BG="\e[44m"
MAGENTA_BG="\e[45m"
CYAN_BG="\e[46m"
WHITE_BG="\e[47m"

# Styles
BOLD="\e[1m"
ITALIC="\e[3m"

echo "

┳┓•  ┏┓     
┃┃┓┏┓┣┫┓┏╋┏┓
┻┛┗┛ ┛┗┗┻┗┗┛
            
"

###############################################################
# Help & Usage                                                # 
###############################################################

# Default
usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto [-u, --url] [--usage] [-h, --help] [-u, --url] [-x, --extensions] [-c, --status-codes] [-d, --dir] [-v, --vhost] [-s, --subdomain] [-t, --threads] [-w, --wordlist] [--check] [-i, --install]"
	echo " "
}

help()
{
	usage
        echo "Options:"
       	printf "  ${ITALIC}--usage${ENDCOLOR}			Prints usage"
        printf "  ${ITALIC}-h, --help${ENDCOLOR}		Prints help"
        printf "  ${ITALIC}-u, --url${ENDCOLOR}			Target URL"
        printf "  ${ITALIC}-x, --extensions${ENDCOLOR}		Scan extensions"
        printf "  ${ITALIC}-c, --status-codes${ENDCOLOR}	Status Codes"
        printf "  ${ITALIC}dir${ENDCOLOR}			Directory Mode"
        printf "  ${ITALIC}vhost${ENDCOLOR}			VHost Mode"
        printf "  ${ITALIC}subdomain${ENDCOLOR}			Subdomain Mode"
        printf "  ${ITALIC}-t, --threads${ENDCOLOR}		Threads"
        printf "  ${ITALIC}-w, --wordlists${ENDCOLOR}		Sets wordlists for directory scan"
        printf "  ${ITALIC}--check${ENDCOLOR}			Check if certain repositories are installed for usage of this script"
        printf "  ${ITALIC}-i, --install${ENDCOLOR}		Install certain repositories in order to utilize this script"
        echo " "
	exit 1
}

# Dir Help
dir_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto dir [-u, --url] [--usage] [-h, --help] [-x, --extensions] [-c, --status-codes] [-t, --threads] [-w, --wordlist]"
	echo " "

}

dir_help() {
	dir_usage
        echo "Options:"
       	printf "  ${ITALIC}--usage${ENDCOLOR}			Prints usage"
        printf "  ${ITALIC}-h, --help${ENDCOLOR}		Prints help"
        printf "  ${ITALIC}-u, --url${ENDCOLOR}			Target URL"
        printf "  ${ITALIC}-x, --extensions${ENDCOLOR}		Scan extensions"
        printf "  ${ITALIC}-c, --status-codes${ENDCOLOR}	Status Codes"
        printf "  ${ITALIC}-t, --threads${ENDCOLOR}		Threads"
        printf "  ${ITALIC}-w, --wordlists${ENDCOLOR}		Sets wordlists for directory scan"
        printf "  ${ITALIC}--check${ENDCOLOR}			Check if certain repositories are installed for usage of this script"
        printf "  ${ITALIC}-i, --install${ENDCOLOR}		Install certain repositories in order to utilize this script"
        echo " "
	exit 1
}


# VHost Help
vhost_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto vhost [-u, --url] [--usage] [-h, --help] [-x, --extensions] [-c, --status-codes] [-t, --threads] [-w, --wordlist]"
	echo " "
}

vhost_help() {
	vhost_usage
        echo "Options:"
       	printf "  ${ITALIC}--usage${ENDCOLOR}			Prints usage"
        printf "  ${ITALIC}-h, --help${ENDCOLOR}		Prints help"
        printf "  ${ITALIC}-u, --url${ENDCOLOR}			Target URL"
        printf "  ${ITALIC}-x, --extensions${ENDCOLOR}		Scan extensions"
        printf "  ${ITALIC}-c, --status-codes${ENDCOLOR}	Status Codes"
        printf "  ${ITALIC}-t, --threads${ENDCOLOR}		Threads"
        printf "  ${ITALIC}-w, --wordlists${ENDCOLOR}		Sets wordlists for directory scan"
        printf "  ${ITALIC}--check${ENDCOLOR}			Check if certain repositories are installed for usage of this script"
        printf "  ${ITALIC}-i, --install${ENDCOLOR}		Install certain repositories in order to utilize this script"
        echo " "
	exit 1
}

# Subdomain Help
subdomain_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto subdomain [-u, --url] [--usage] [-h, --help] [-x, --extensions] [-c, --status-codes] [-t, --threads] [-w, --wordlist]"
	echo " "
}

subdomain_help() { 
	subdomain_usage
        echo "Options:"
       	printf "  ${ITALIC}--usage${ENDCOLOR}			Prints usage"
        printf "  ${ITALIC}-h, --help${ENDCOLOR}		Prints help"
        printf "  ${ITALIC}-u, --url${ENDCOLOR}			Target URL"
        printf "  ${ITALIC}-x, --extensions${ENDCOLOR}		Scan extensions"
        printf "  ${ITALIC}-c, --status-codes${ENDCOLOR}	Status Codes"
        printf "  ${ITALIC}-t, --threads${ENDCOLOR}		Threads"
        printf "  ${ITALIC}-w, --wordlists${ENDCOLOR}		Sets wordlists for directory scan"
        printf "  ${ITALIC}--check${ENDCOLOR}			Check if certain repositories are installed for usage of this script"
        printf "  ${ITALIC}-i, --install${ENDCOLOR}		Install certain repositories in order to utilize this script"
        echo " "
	exit 1
}

###############################################################
# Arguments                                                   #
###############################################################
# Check if list of arguments are met
if [ $# -eq 0 ];
then 
	usage
        exit 1
fi

URL=""
EXTENSIONS=""
STATUS_CODES=""
THREADS=""
WORDLISTS=""
GOBUSTER=false
FEROXBUSTER=false
DIRSEARCH=false
DIRB=false
AUTO=false

while [[ "$#" -gt 0 ]]; do
	case $1 in
		-h|--help) usage ;;
		-u|--url) URL="$2"; shift ;;
		-x|--extensions) EXTENSIONS="$2"; shift ;;
		-c|--status-codes) STATUS_CODES="$2"; shift ;;
		dir) 
			shift
			dir 
			shift
			while [[ "$#" -gt 0 ]]; do
				case $1 in
					-h|--help) usage ;;
					-u|--url) URL="$2"; shift ;;
					gb) GOBUSTER=true; shift ;; # GoBuster
					ff) FFUF=true; shift ;; # FFuF
					fb) FEROXBUSTER=true; shift ;; # FeroxBuster
					ds) DIRSEARCH=true; shift ;; # Dirsearch
					db) DIRB=true; shift ;; # Dirb
					-x|--extensions) EXTENSIONS="$2"; shift ;;
					-c|--status-codes) STATUS_CODES="$2"; shift ;;
					-t|--threads) THREADS="$2"; shift ;;
					-w|--wordlists) WORDLISTS="$2"; shift ;;
					--auto) auto=true; shift ;; 
					*) printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Unknown parameter passed: $1"; exit 1 ;;
				esac
				shift
			done
			;;
		vhost)
			shift
			vhost
			shift
			while [[ "$#" -gt 0 ]]; do
				case $1 in
					-h|--help) usage ;;
					-u|--url) URL="$2"; shift ;;
					gb) GOBUSTER=true; shift ;; # GoBuster
					ff) FFUF=true; shift ;; # FFuF
					fb) FEROXBUSTER=true; shift ;; # FeroxBuster
					ds) DIRSEARCH=true; shift ;; # Dirsearch
					db) DIRB=true; shift ;; # Dirb
					-x|--extensions) EXTENSIONS="$2"; shift ;;
					-c|--status-codes) STATUS_CODES="$2"; shift ;;
					-t|--threads) THREADS="$2"; shift ;;
					-w|--wordlists) WORDLISTS="$2"; shift ;;
					--auto)  ;; 
					*) printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Unknown parameter passed: $1"; exit 1 ;;
				esac
				shift
			done
			;;
		subdomain) 
			shift
			subdomain
			shift
			while [[ "$#" -gt 0 ]]; do
				case $1 in
					-h|--help) usage ;;
					-u|--url) URL="$2"; shift ;;
					gb) GOBUSTER=true; shift ;; # GoBuster
					ff) FFUF=true; shift ;; # FFuF
					fb) FEROXBUSTER=true; shift ;; # FeroxBuster
					ds) DIRSEARCH=true; shift ;; # Dirsearch
					db) DIRB=true; shift ;; # Dirb
					-x|--extensions) EXTENSIONS="$2"; shift ;;
					-c|--status-codes) STATUS_CODES="$2"; shift ;;
					-t|--threads) THREADS="$2"; shift ;;
					-w|--wordlists) WORDLISTS="$2"; shift ;;
					--auto)  ;; 
					*) printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Unknown parameter passed: $1"; exit 1 ;;
				esac
				shift
			done
			;;
		-t|--threads) THREADS="$2"; shift ;;
		-w|--wordlists) WORDLISTS="$2"; shift ;;
		--check) check ;;
		-i|--install) installation ;; 
		*) printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Unknown parameter passed: $1"; exit 1 ;;
	esac
	shift
done


# ===========================================================================
# Checking Conditions... 
# ===========================================================================

# ---------------------------------------------------------------------------
# Repositories Check
# ---------------------------------------------------------------------------
check() {
	if ! [-f /usr/bin/gobuster ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Gobuster is not located in /usr/bin. Install Gobuster.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Gobuster installed.\n"

	if ! [-f /usr/bin/ffuf ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} FFuF is not located in /usr/bin. Install FFuF.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} FFuF installed.\n"
	
	if ! [-f /usr/bin/feroxbuster ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} FeroxBuster is not located in /usr/bin. Install FeroxBuster.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Feroxbuster installed.\n"

	if ! [-f /usr/bin/dirsearch ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Dirsearch is not located in /usr/bin. Install Dirsearch.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Dirsearch installed\n"

	if ! [-f /usr/bin/dirb ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Dirb is not located in /usr/bin. Install Dirb.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Dirb installed\n"
	
	if ! [ -f /usr/share/seclists ] || [ -f /usr/share/wordlist/seclists ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Seclists is not located in /usr/bin. Install Seclists.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Seclists installed\n"

	echo " "

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} All of the programs are installed for usage."

	exit 1
}

# ---------------------------------------------------------------------------
# Repositories Installation
# (Optional Function) Incomplete
# ---------------------------------------------------------------------------
installation() {
	# Incomplete
	echo "Installing gobuster..."	
	echo "Installing FFuF..."	
	echo "Installing Feroxbuster..."	
	echo "Installing Dirsearch..."	
	echo "Installing Dirb..."	
	echo "Installing Seclists..."	
	exit 1
}

###############################################################
# Printing output options...                                  #
###############################################################
input_check() {
	# ---------------------------------------------------------------------------
	# URL
	# ---------------------------------------------------------------------------
	if [ -z "$URL" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Missing URL address. Please specify the URL using the -u or --url option."
		exit 1
	fi

	# ---------------------------------------------------------------------------
	# EXTENSIONS
	# ---------------------------------------------------------------------------
	if [[ -n "$EXTENSIONS" ]]; then
		if ! [[ $EXTENSIONS =~ ^[a-zA-Z0-9.,]+$ ]]; then
			printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Status Codes must not contain any special characters'"
			exit 1
		fi	
	fi

	# ---------------------------------------------------------------------------
	# STATUS CODES
	# ---------------------------------------------------------------------------
	if [[ -n "$STATUS_CODES" ]]; then
		if ! [[ $STATUS_CODES =~ ^[0-9]+$ ]]; then
			printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Status Codes must contain only integer and the following ','"
			exit 1
		fi	
	fi

	# ---------------------------------------------------------------------------
	# THREADS
	# ---------------------------------------------------------------------------
	if [[ -n "$THREADS" ]]; then
		if ! [[ $THREADS =~ ^[0-9]+$ ]]; then
			printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Threads must contain only integers"
			exit 1
		fi	
	fi

	# Print info if they are included
	echo " "
	printf "${YELLOW}Target:${ENDCOLOR} ${WHITE}$URL${ENDCOLOR}\n"

	if [[ -n "$EXTENSIONS" ]]; then
		printf "${YELLOW}Extensions:${ENDCOLOR} $EXTENSIONS\n"
	fi

	if [[ -n "$THREADS" ]]; then
		printf "${YELLOW}Threads:${ENDCOLOR} $THREADS\n"
	fi

	if [[ -n "$STATUS_CODES" ]]; then
		printf "${YELLOW}Status Codes:${ENDCOLOR} $STATUS_CODES\n"
	fi

	if [[ -n "$WORDLISTS" ]]; then
		printf "${YELLOW}Wordlists:${ENDCOLOR} $WORDLISTS\n"
	fi
}

# ---------------------------------------------------------------------------
# MODES
# ---------------------------------------------------------------------------
# Directory Mode
dir() {
	input_check

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Initialized Directory Mode${ENDCOLOR}"

	mkdir Dirauto

	if ["$AUTO" == "true" ]
		automatic_dir_scan
		exit 1
	fi

	# Perform a for loop for the list of wordlists
	# Review this code section over here
	
	# Before initializing the for-loop for wordlists,
	# Modify the code to ensure that it can find the directory of 'Seclists',
	# along with folder called 'Discovery' and 'Web-Discovery' for further enumeration through verification!
	
	# We can reduce the name of the file path by simply giving a name 
	# For example: Instead of giving the full path like this: /usr/share/wordlist/seclists/Discovery/WebContent/directory-list-2.3-small.txt
	# We can just give a name like 'directory-list-2.3-small.txt' just like that and we can separate using comments to know where the following file 
	# path is.
	# The reason for this practice is to ensure that it saves time in performing enumeration scans of unnecessary giving the full path just like that
	# Which completely wastes so much time giving the actual location of where th files are.
	OLD_IFS=$IFS
	IFS=";"
	readread -ra FILES <<< "$WORDLISTS"
	IFS=$OLD_IFS
	for wordlist in ${WORDLISTS[@]}; do
		if ["$GOBUSTER" == "true" ]
			run_gobuster "$URL" wordlist "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
		fi

		if ["$FFUF" == "true" ]
			run_FFuF "$URL" wordlist "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
		fi

		if ["$DIRSEARCH" == "true"] 
			run_dirsearch "$URL" wordlist "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
		fi

		if ["$FEROXBUSTER" == "true"] 
			run_feroxbuster "$URL" wordlist "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
		fi

		if ["$DIRB" == "true"] 
			run_dirb "$URL" wordlist "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
		fi
	done

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Completed Directory Mode${ENDCOLOR}"

	exit 1
}


# Subdomain 
subdomain() {
	input_check
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Subdomain Mode"
}

# VHost
vhost() {
	input_check
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} VHost Mode"
}

###############################################################
# Directory Enumeration Selection Option                      #
###############################################################
automatic_dir_scan() {
	# Check is Seclists directory actually exist first before actually executinglist

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Automatic Directory Enumeration Scan Enabled..${ENDCOLOR}"

	mkdir -p Dirauto/Auto/GoBuster
	mkdir -p Dirauto/Auto/Feroxbuster

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Started Automatic Directory Enumeration Scan \n"
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Initializing Gobuster...\n"
	gobuster dir -u $URL -w /usr/share/seclists/Discovery/Web-Content/common.txt -o $(pwd)/Dirauto/Auto/Gobuster/common.txt
	gobuster dir -u $URL -w /usr/share/seclists/Discovery/Web-Content/big.txt -o $(pwd)/Dirauto/Auto/Gobuster/big.txt
	gobuster dir -u $URL -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt -o $(pwd)/Dirauto/Auto/Gobuster/dir_small.txt
	gobuster dir -u $URL -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -o $(pwd)/Dirauto/Auto/Gobuster/dir_medium.txt

	echo " "

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Initializing Feroxbuster...\n"
	feroxbuster -u $URL --output $(pwd)/Dirauto/Auto/Feroxbuster/feroxbuster.txt

	echo " "

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Completed Automatic Directory Enumeration Scan \n"
}

vhost_mode() {

	options=("bitquark-subdomains-top100000.txt" "bug-bounty-program-subdomains-trickest-inventory.txt" "combined_subdomains.txt" "deepmagic.com-prefixes-top500.txt" "deepmagic.com-prefixes-top50000.txt" "dns-Jhaddix.txt" "fierce-hostlist.txt" "namelist.txt" "shubs-subdomains.txt" "subdomains-top1million-110000.txt" "subdomains-top1million-20000.txt" "subdomains-top1million-5000.txt" "tlds.txt")

	# ===============================================================================================
	# Execute VHost enumeration tools from user's preference
	mkdir DIRAUTO_SCANS
	mkdir -p DIRAUTO_SCANS/VHOST
	OPTION="vhost"
	for program in "${vhost_options[@]}"; do
		case $program in 
			"gobuster")
				echo "Executing Gobuster..."
				run_gobuster "$OPTION" "$URL" "${wordlists}" "$extensions" "$status_codes" "$threads"
				;;
			"ffuf")
				echo "Executing FFuF..."
				run_FFuF "$OPTION" "$URL" "${wordlists}" "$extensions" "$status_codes" "$threads"
				;;
		esac
	done
	# ===============================================================================================
}

dns_mode() {
	options=("bitquark-subdomains-top100000.txt" "bug-bounty-program-subdomains-trickest-inventory.txt" "combined_subdomains.txt" "deepmagic.com-prefixes-top500.txt" "deepmagic.com-prefixes-top50000.txt" "dns-Jhaddix.txt" "fierce-hostlist.txt" "namelist.txt" "shubs-subdomains.txt" "subdomains-top1million-110000.txt" "subdomains-top1million-20000.txt" "subdomains-top1million-5000.txt" "tlds.txt")

	# ===============================================================================================
	# Execute VHost enumeration tools from user's preference
	mkdir DIRAUTO_SCANS
	mkdir -p DIRAUTO_SCANS/DNS
	OPTION="dns"
	for program in "${dns_options[@]}"; do
		case $program in 
			"gobuster")
				echo "Executing Gobuster..."
				run_gobuster "$OPTION" "$URL" "${wordlists}" "$extensions" "$status_codes" "$threads"
				;;
			"ffuf")
				echo "Executing FFuF..."
				run_FFuF "$OPTION" "$URL" "${wordlists}" "$extensions" "$status_codes" "$threads"
				;;
		esac
	done
	# ===============================================================================================
}

###############################################################
# Enumeration Programs                                        #
###############################################################
run_gobuster() {
	local option="$1"
	local wordlists=("${@:3}")
	if [ "$option" == "dir" ]; then
		mkdir -p DIRAUTO_SCANS/DIR/Gobuster
		counter=0
		for wordlist in "${wordlists[@]}"; do
			if [ -z "$wordlist" ]; then
				break
			fi

			local url="$2"
			local extension="$4"
			local response_codes="$5"
			local execution_rate="$6"

			echo "URL: $url"
			echo "Extension: $extension"
			echo "Response Codes: $response_codes"
			echo "Execution Rate: $execution_rate"

			# GoBuster comamnd with conditionally added parameters
			# command="gobuster dir -u $url -w $wordlist"
			command="gobuster dir -u $url -w $wordlist -o $(pwd)/DIRAUTO_SCANS/DIR/Gobuster/gobuster_dir_output_$counter.txt"

			if [ -n "$extension" ]; then
				if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
					command+=" -x $extension"	
				fi
			fi

			
			if [ -n "$response_codes" ]; then
				if [[ $response_codes =~ *[[:alpha:]]* ]] && [[ $response_codes =~ *[[:digit:]]* ]]; then
					command+=" -s $response_codes"	
				fi
			fi

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"	
				fi
			fi

			echo "$command"

			# Execute the constructed command
			eval "$command"

			((counter++))
		done
	elif [ "$option" == "vhost" ]; then
		mkdir -p DIRAUTO_SCANS/VHOST/Gobuster
		counter=0
		for wordlist in "${wordlists[@]}"; do
			if [ -z "$wordlist" ]; then
				break
			fi

			local url="$2"
			local execution_rate="$6"

			# GoBuster comamnd with conditionally added parameters
			# command="gobuster vhost -u $url -w $wordlist"
			command="gobuster vhost -u $url -w $wordlist -o $(pwd)/DIRAUTO_SCANS/VHOST_MODE/Gobuster/gobuster_vhost_output_$counter.txt"

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"	
				fi
			fi

			echo "$command"

			# Execute the constructed command
			eval "$command"

			((counter++))
		done
	elif [ "$option" == "dns" ]; then
		mkdir -p DIRAUTO_SCANS/DNS/Gobuster
		counter=0
		for wordlist in "${wordlists[@]}"; do
			if [ -z "$wordlist" ]; then
				break
			fi

			local url="$2"
			local execution_rate="$6"
		
			# GoBuster comamnd with conditionally added parameters
			command="gobuster dns -d $url -w $wordlist -i -o $(pwd)/DIRAUTO_SCANS/DNS/Gobuster/gobuster_dns_output_$counter.txt"

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"	
				fi
			fi

			echo "$command"

			# Execute the constructed command
			eval "$command"

			((counter++))
		done
	else 
		echo "Gobuster cannot perform the following enumeration method: $option"
	fi 
}

run_FFuF() {
	local option="$1"
	local wordlists=("${@:3}")

	if [ "$option" == "dir" ]; then
		mkdir -p DIRAUTO_SCANS/DIR/FFuF
		counter=0
		for wordlist in "${wordlists[@]}"; do
			if [ -z "$wordlist" ]; then
				break
			fi

			local url="$2"
			local extension="$4"
			local response_codes="$5"
			local execution_rate="$6"
			
			# FFuF command with conditionally added parameters
			command="ffuf -c -w $wordlist -u $url/FUZZ -o $(pwd)/DIRAUTO_SCANS/DIR/FFuF/FFuF_dir_output_$counter.txt"
			
			if [ -n "$extension" ]; then
				if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
					command+=" -e $extension"
				fi
			fi 

			if [ -n "$response_codes" ]; then
				if [[ $response_codes =~ *[[:alpha:]]* ]] && [[ $response_codes =~ *[[:digit:]]* ]]; then
					command+=" -mc $response_codes"
				fi
			fi 

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"
				fi
			fi 
			
			echo "$command"

			# Execute the constructed command
			eval "$command"

			((counter++))
		done
	elif [ "$option" == "vhost" ]; then
		mkdir -p DIRAUTO_SCANS/VHOST/FFuF
		counter=0
		for wordlist in "${wordlists[@]}"; do
			if [ -z "$wordlist" ]; then
				break
			fi

			local url="$2"
			local execution_rate="$6"

			echo "Enter the name of the header for FUZZING (Example: \"Host: FUZZ.ffuf.com \"): "	
			read headerInput

			# FFuF command with conditionally added parameters
			command="ffuf -c -w $wordlist -H \"$headerInput\" -u $url -o $(pwd)/DIRAUTO_SCANS/VHOST/FFuF/FFuF_vhost_output_$counter.txt"

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"
				fi
			fi 

			echo "$command"

			# Execute the constructed command
			eval "$command"

			((counter++))
		done
	elif [ "$option" == "dns" ]; then
		mkdir -p DIRAUTO_SCANS/DNS/FFuF
		counter=0
		for wordlist in "${wordlists[@]}"; do
			if [ -z "$wordlist" ]; then
				break
			fi

			local url="$2"
			local execution_rate="$6"

			# FFuF command with conditionally added parameters
			command="ffuf -c -w $wordlist -u $url -H \"Host: FUZZ\" -o $(pwd)/DIRAUTO_SCANS/DNS/FFuF/FFuF_dns_output_$counter.txt"
		
			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"
				fi
			fi 

			echo "$command"

			# Execute the constructed command
			eval "$command"
		done
	else 
		echo "FFuF cannot perform the following enumeration method: $option"
	fi 
}

run_dirsearch() {
	local option="$1"
	local wordlists=("${@:3}")
	if [ "$option" == "dir" ]; then
		mkdir -p DIRAUTO_SCANS/DIR/Dirsearch
		counter=0

		if [ -z "$wordlist" ]; then
			break
		fi

		local url="$2"
		local extension="$4"
		local response_codes="$5"
		local execution_rate="$6"

		# Dirsearch command with conditionally added parameters
		# command="python3 ~/Tools/dirsearch/dirsearch.py -u $url"
		command="dirsearch -u $url -o $(pwd)/DIRAUTO_SCANS/DIR/Dirsearch/dirsearch_dir_output_$counter.txt"

		if [ -n "$extension" ]; then
			if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
				command+=" -e $extension"
			fi
		fi 

		if [ -n "$response_codes" ]; then
			if [[ $response_codes =~ *[[:alpha:]]* ]] && [[ $response_codes =~ *[[:digit:]]* ]]; then
				command+=" -i $response_codes"
			fi
		fi 

		if [ -n "$execution_rate" ]; then
			if [[ $execution_rate =~ *[[:digit:]]* ]]; then
				command+=" -t $execution_rate"
			fi
		fi 

		echo "$command"

		# Execute the constructed command
		eval "$command"

		((counter++))
	else 
		echo "DirSearch cannot perform the following enumeration method: $option"
	fi 
	
}

run_feroxbuster() {
	local option="$1"
	local wordlists=("${@:3}")
	if [ "$option" == "dir" ]; then
		mkdir -p DIRAUTO_SCANS/DIR/Feroxbuster
		counter=0

		if [ -z "$wordlist" ]; then
			break
		fi

		local url="$2"
		local extension="$4"
		local response_codes="$5"
		local execution_rate="$6"
		
		# Feroxbuster command with conditionally added parameters
		# command="feroxbuster --url $url --output $(pwd)/DIRAUTO_SCANS/DIR/Feroxbuster/feroxbuster_dir_output_$counter.txt"	
		command="feroxbuster --url $url"	
		echo "$command"

		if [ -n "$extension" ]; then
			if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
				command+=" -x $extension"
			fi
		fi 

		if [ -n "$execution_rate" ]; then
			if [[ $execution_rate =~ *[[:digit:]]* ]]; then
				command+=" -t $execution_rate"
			fi
		fi 

		echo "$command"

		# Executed the constructed command
		eval "$command"

		((counter++))
	else 
		echo "Feroxbuster cannot perform the following enumeration method: $option"
	fi 
}

run_dirb() {
	local option="$1"
	local wordlists=("${@:3}")

	if [ "$option" == "dir" ]; then
		mkdir -p DIRAUTO_SCANS/DIR/Dirb
		counter=0

		if [ -z "$wordlist" ]; then
			break
		fi

		local url="$2"
		local extension="$4"

		# Dirb command with conditionally added parameters	
		command="dirb $url -o $(pwd)/DIRAUTO_SCANS/DIR/Dirb/dirb_dir_output_$counter.txt"

		if [ -n "$extension" ]; then
			if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
				command+=" -X $extension"
			fi
		fi 

		echo "$command"

		# Execute the constructed command
		eval "$command"

		((counter++))
	else 
		echo "Dirb cannot perform the following enumeration method: $option"
	fi 
}




