#!/bin/bash

###############################################################
# Color Codes 				 	      	      # 
###############################################################
BLACK="\e[30m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
LIGHT_GRAY="\e[37m"
GRAY="\e[90m"
LIGHT_RED="\e[91m"
LIGHT_GREEN="\e[92m"
LIGHT_YELLOW="\e[93m"
LIGHT_BLUE="\e[94m"
LIGHT_MAGENTA="\e[95m"
LIGHT_CYAN="\e[96m"
WHITE="\e[97m"
ENDCOLOR="\e[0m"

# Background Color
BLACK_BG="\e[40m"
RED_BG="\e[41m"
GREEN_BG="\e[42m"
YELLOW_BG="\e[43m"
BLUE_BG="\e[44m"
MAGENTA_BG="\e[45m"
CYAN_BG="\e[46m"
WHITE_BG="\e[47m"

# Styles
BOLD="\e[1m"
ITALIC="\e[3m"

echo "
┳┓•  ┏┓     
┃┃┓┏┓┣┫┓┏╋┏┓
┻┛┗┛ ┛┗┗┻┗┗┛
"

###############################################################
# Help & Usage                                                # 
###############################################################

# Default
usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto [dir / vhost / subdomain] [-u, --url] [--usage] [-h, --help] [-u, --url] [-x, --extensions] [-c, --status-codes] [-d, --dir] [-v, --vhost] [-s, --subdomain] [-t, --threads] [-w, --wordlist] [--check] [-i, --install]"
	echo " "
}

help()
{
	usage
        echo "Options:"
       	printf "  ${ITALIC}--usage${ENDCOLOR}			Prints usage\n"
        printf "  ${ITALIC}-h, --help${ENDCOLOR}		Prints help\n"
        printf "  ${ITALIC}-u, --url${ENDCOLOR}			Target URL\n"
        printf "  ${ITALIC}-x, --extensions${ENDCOLOR}		Scan extensions\n"
        printf "  ${ITALIC}-c, --status-codes${ENDCOLOR}	Status Codes\n"
        printf "  ${ITALIC}dir${ENDCOLOR}			Directory Mode\n"
        printf "  ${ITALIC}vhost${ENDCOLOR}			VHost Mode\n"
        printf "  ${ITALIC}subdomain${ENDCOLOR}			Subdomain Mode\n"
        printf "  ${ITALIC}-t, --threads${ENDCOLOR}		Threads\n"
        printf "  ${ITALIC}-w, --wordlists${ENDCOLOR}		Sets wordlists for directory scan\n"
        printf "  ${ITALIC}--check${ENDCOLOR}			Check if certain repositories are installed for usage of this script\n"
        printf "  ${ITALIC}-i, --install${ENDCOLOR}		Install certain repositories in order to utilize this script\n"
        echo " "
	exit 1
}

dir_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto dir [-u, --url] [--usage] [-h, --help] [-x, --extensions] [-c, --status-codes] [-t, --threads] [-w, --wordlist]"
	echo " "
}

dir_help() {
	dir_usage
        echo "Options:"
       	printf "  ${ITALIC}--usage${ENDCOLOR}			Prints usage\n"
        printf "  ${ITALIC}-h, --help${ENDCOLOR}		Prints help\n"
        printf "  ${ITALIC}-u, --url${ENDCOLOR}			Target URL\n"
        printf "  ${ITALIC}-x, --extensions${ENDCOLOR}		Scan extensions\n"
        printf "  ${ITALIC}-c, --status-codes${ENDCOLOR}	Status Codes\n"
        printf "  ${ITALIC}-t, --threads${ENDCOLOR}		Threads\n"
        printf "  ${ITALIC}-w, --wordlists${ENDCOLOR}		Sets wordlists for directory scan\n"
        echo " "
	exit 0
}

vhost_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto vhost [-u, --url] [--usage] [-h, --help] [-x, --extensions] [-c, --status-codes] [-t, --threads] [-w, --wordlist]"
	echo " "
	# exit 0
}

vhost_help() {
	vhost_usage
        echo "Options:"
       	printf "  ${ITALIC}--usage${ENDCOLOR}			Prints usage\n"
        printf "  ${ITALIC}-h, --help${ENDCOLOR}		Prints help\n"
        printf "  ${ITALIC}-u, --url${ENDCOLOR}			Target URL\n"
        printf "  ${ITALIC}-x, --extensions${ENDCOLOR}		Scan extensions\n"
        printf "  ${ITALIC}-c, --status-codes${ENDCOLOR}	Status Codes\n"
        printf "  ${ITALIC}-t, --threads${ENDCOLOR}		Threads\n"
        printf "  ${ITALIC}-w, --wordlists${ENDCOLOR}		Sets wordlists for directory scan\n"
        echo " "
	exit 0
}

subdomain_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto subdomain [-u, --url] [--usage] [-h, --help] [-x, --extensions] [-c, --status-codes] [-t, --threads] [-w, --wordlist]"
	echo " "
	# exit 0
}

subdomain_help() { 
	subdomain_usage
        echo "Options:"
       	printf "  ${ITALIC}--usage${ENDCOLOR}			Prints usage\n"
        printf "  ${ITALIC}-h, --help${ENDCOLOR}		Prints help\n"
        printf "  ${ITALIC}-u, --url${ENDCOLOR}			Target URL\n"
        printf "  ${ITALIC}-x, --extensions${ENDCOLOR}		Scan extensions\n"
        printf "  ${ITALIC}-c, --status-codes${ENDCOLOR}	Status Codes\n"
        printf "  ${ITALIC}-t, --threads${ENDCOLOR}		Threads\n"
        printf "  ${ITALIC}-w, --wordlists${ENDCOLOR}		Sets wordlists for directory scan\n"
        echo " "
	exit 0
}

###############################################################
# Arguments                                                   #
###############################################################
if [ $# -eq 0 ];
then 
	usage
        exit 1
fi

URL=""
EXTENSIONS=""
STATUS_CODES=""
THREADS=""
EXECUTION_RATE=""
WORDLISTS=""
GOBUSTER=false
FEROXBUSTER=false
DIRSEARCH=false
DIRB=false
AUTO=false

while [[ "$#" -gt 0 ]]; do
	case $1 in
		-h|--help) help ;;
		--usage) usage ;;
		-u|--url) URL="$2"; shift ;;
		-x|--extensions) EXTENSIONS="$2"; shift ;;
		-c|--status-codes) STATUS_CODES="$2"; shift ;;
		dir) 
			shift
			while [[ "$#" -gt 0 ]]; do
				case $1 in
					-h|--help) dir_help ;;
					--usage) dir_usage ;;
					-u|--url) URL="$2"; shift ;; # Check here if URL has passed over here
					gb) GOBUSTER=true; shift ;;
					ff) FFUF=true; shift ;;
					fb) FEROXBUSTER=true; shift ;;
					ds) DIRSEARCH=true; shift ;;
					db) DIRB=true; shift ;;
					-x|--extensions) EXTENSIONS="$2"; shift ;;
					-c|--status-codes) STATUS_CODES="$2"; shift ;;
					-t|--threads) THREADS="$2"; shift ;;
					-w|--wordlists) WORDLISTS="$2"; shift ;;
					--auto) auto=true; shift ;; 
					*) printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Unknown parameter passed: $1"; exit 1 ;;
				esac
				shift
			done
			;;
		vhost)
			shift
			while [[ "$#" -gt 0 ]]; do
				case $1 in
					-h|--help) vhost_help ;;
					--usage) vhost_usage ;;
					-u|--url) URL="$2"; shift ;;
					gb) GOBUSTER=true; shift ;;
					ff) FFUF=true; shift ;;
					fb) FEROXBUSTER=true; shift ;;
					ds) DIRSEARCH=true; shift ;;
					db) DIRB=true; shift ;;
					-x|--extensions) EXTENSIONS="$2"; shift ;;
					-c|--status-codes) STATUS_CODES="$2"; shift ;;
					-t|--threads) THREADS="$2"; shift ;;
					-w|--wordlists) WORDLISTS="$2"; shift ;;
					--auto)  ;; 
					*) printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Unknown parameter passed: $1"; exit 1 ;;
				esac
				shift
			done
			;;
		subdomain) 
			shift
			while [[ "$#" -gt 0 ]]; do
				case $1 in
					-h|--help) subdomain_help ;;
					--usage) subdomain_usage ;;
					-u|--url) URL="$2"; shift ;;
					gb) GOBUSTER=true; shift ;; # GoBuster
					ff) FFUF=true; shift ;; # FFuF
					fb) FEROXBUSTER=true; shift ;; # FeroxBuster
					ds) DIRSEARCH=true; shift ;; # Dirsearch
					db) DIRB=true; shift ;; # Dirb
					-x|--extensions) EXTENSIONS="$2"; shift ;;
					-c|--status-codes) STATUS_CODES="$2"; shift ;;
					-t|--threads) THREADS="$2"; shift ;;
					-w|--wordlists) WORDLISTS="$2"; shift ;;
					--auto)  ;; 
					*) printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Unknown parameter passed: $1"; exit 1 ;;
				esac
				shift
			done
			;;
		-t|--threads) THREADS="$2"; shift ;;
		-w|--wordlists) WORDLISTS="$2"; shift ;;
		--check) check ;;
		-i|--install) installation ;; 
		*) printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Unknown parameter passed: $1"; exit 1 ;;
	esac
	shift
done


# ===========================================================================
# Checking Conditions... 
# ===========================================================================
# ---------------------------------------------------------------------------
# Repositories Check
# ---------------------------------------------------------------------------
check() {
	if ! [-f /usr/bin/gobuster ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Gobuster is not located in /usr/bin. Install Gobuster.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Gobuster installed.\n"

	if ! [-f /usr/bin/ffuf ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} FFuF is not located in /usr/bin. Install FFuF.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} FFuF installed.\n"
	
	if ! [-f /usr/bin/feroxbuster ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} FeroxBuster is not located in /usr/bin. Install FeroxBuster.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Feroxbuster installed.\n"

	if ! [-f /usr/bin/dirsearch ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Dirsearch is not located in /usr/bin. Install Dirsearch.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Dirsearch installed\n"

	if ! [-f /usr/bin/dirb ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Dirb is not located in /usr/bin. Install Dirb.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Dirb installed\n"
	
	if ! [ -f /usr/share/seclists ] || [ -f /usr/share/wordlist/seclists ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Seclists is not located in /usr/bin. Install Seclists.\n"
		exit 1
	fi 
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Seclists installed\n"

	echo " "

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} All of the programs are installed for usage. You are ready to enumerate!"

	exit 1
}

###############################################################
# Printing output options...                                  #
###############################################################
search_wordlist() {
	local wordlist_name="$1"
	find "/usr/share/" -type f -name "$wordlist_name" 2>/dev/null
}

URL_check() {
	local URL="$1"

	# ---------------------------------------------------------------------------
	# URL
	# ---------------------------------------------------------------------------
	if [ -z "$URL" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Missing URL address. Please specify the URL using the -u or --url option."
		exit 1
	fi
}

input_check() {
	# ---------------------------------------------------------------------------
	# WORDLIST
	# ---------------------------------------------------------------------------
	if [ -z "$WORDLIST" ]; then
		if ! [ -f /usr/share/seclists ] || [ -f /usr/share/wordlist/seclists ]; then
			printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Seclists is not located in /usr/bin. Install Seclists.\n"
			exit 1
		fi 

		wordlist_path=$(search_wordlist "$WORDLIST")	
		if [ -z "$wordlist_path" ]; then
			printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Wordlist not found\n"
			exit 1
		fi

		printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Using wordlist: \n"

		exit 1
	fi

	# ---------------------------------------------------------------------------
	# EXTENSIONS
	# ---------------------------------------------------------------------------
	if [[ -n "$EXTENSIONS" ]]; then
		if ! [[ $EXTENSIONS =~ ^[a-zA-Z0-9.,]+$ ]]; then
			printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Status Codes must not contain any special characters'"
			exit 1
		fi	
	fi

	# ---------------------------------------------------------------------------
	# STATUS CODES
	# ---------------------------------------------------------------------------
	if [[ -n "$STATUS_CODES" ]]; then
		if ! [[ $STATUS_CODES =~ ^[0-9]+$ ]]; then
			printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Status Codes must contain only integer and the following ','"
			exit 1
		fi	
	fi

	# ---------------------------------------------------------------------------
	# EXECUTION RATE
	# ---------------------------------------------------------------------------
	if [[ -n "$EXECUTION_RATE" ]]; then
		if ! [[ $EXECUTION_RATE =~ ^[0-9]+$ ]]; then
			printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Execution Rate must only accept integers"
			exit 1
		fi	
	fi

	# ---------------------------------------------------------------------------
	# THREADS
	# ---------------------------------------------------------------------------
	if [[ -n "$THREADS" ]]; then
		if ! [[ $THREADS =~ ^[0-9]+$ ]]; then
			printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Threads must contain only integers"
			exit 1
		fi	
	fi

	echo " "
	printf "${YELLOW}Target:${ENDCOLOR} ${WHITE}$URL${ENDCOLOR}\n"

	if [[ -n "$EXTENSIONS" ]]; then
		printf "${YELLOW}Extensions:${ENDCOLOR} $EXTENSIONS\n"
	fi

	if [[ -n "$THREADS" ]]; then
		printf "${YELLOW}Threads:${ENDCOLOR} $THREADS\n"
	fi

	if [[ -n "$STATUS_CODES" ]]; then
		printf "${YELLOW}Status Codes:${ENDCOLOR} $STATUS_CODES\n"
	fi

	if [[ -n "$EXECUTION_RATE" ]]; then
		printf "${YELLOW}Execution Rate:${ENDCOLOR} $EXECUTION_RATE\n"
	fi

	if [[ -n "$WORDLISTS" ]]; then
		printf "${YELLOW}Wordlists:${ENDCOLOR} $WORDLISTS\n"
	fi
}

###############################################################
# Directory Enumeration Selection Option                      #
###############################################################
automatic_dir_scan() {
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Automatic Directory Enumeration Scan Enabled..${ENDCOLOR}"

	mkdir -p Dirauto/dir/Auto/Gobuster
	mkdir -p Dirauto/dir/Auto/Feroxbuster

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Started Automatic Directory Enumeration Scan \n"
	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Initializing Gobuster...\n"

	common_path=$($search_wordlist "common.txt")
	if [ -z "$common_path" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} common.txt wordlist not found\n"
	else
		printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Found common.txt wordlist\n"
		gobuster dir -u $URL -w $common_path -o $(pwd)/Dirauto/dir/Auto/Gobuster/common.txt
	fi

	big_path=$($search_wordlist "big.txt")
	if [ -z "$big_path" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} big.txt wordlist not found\n"
	else 
		printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Found big.txt wordlist\n"
		gobuster dir -u $URL -w $big_path -o $(pwd)/Dirauto/Auto/Gobuster/big.txt
	fi

	directory_list_small_path=$($search_wordlist "directory-list-2.3-small.txt")
	if [ -z "$directory_list_small_path" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} directory-list-2.3-small.txt wordlist not found\n"
	else
		printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Found directory-list-2.3-small.txt wordlist\n"
		gobuster dir -u $URL -w $directory_list_small_path -o $(pwd)/Dirauto/Auto/Gobuster/dir_small.txt
	fi

	directory_list_medium_path=$($search_wordlist "directory-list-2.3-medium.txt")
	if [ -z "$directory_list_medium_path" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} directory-list-2.3-medium.txt wordlist not found\n"
	else 
		printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Found directory-list-2.3-medium.txt wordlist\n"
		gobuster dir -u $URL -w $directory_list_medium_path -o $(pwd)/Dirauto/Auto/Gobuster/dir_medium.txt
	fi

	echo " "

	raft_medium_directories_path=$($search_wordlist "raft-medium-directories.txt")
	if [ -z "$raft_medium_directories_path" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} raft-medium-directories.txt wordlist not found\n"
	else 
		printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Found raft-medium-directories.txt wordlist\n"
		printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Initializing Feroxbuster...\n"
		feroxbuster -u $URL --output $(pwd)/Dirauto/Auto/Feroxbuster/feroxbuster.txt
	fi

	echo " "

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} Completed Automatic Directory Enumeration Scan \n"
}

###############################################################
# Enumeration Programs                                        #
###############################################################
run_gobuster() {
	local OPTION="$1"

	if [ "$OPTION" == "dir" ]; then
		local url="$2"
		local extension="$4"
		local response_codes="$5"
		local execution_rate="$6"

		IFS=";" read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			command="gobuster dir -u $url -w $wordlist -o $(pwd)/Dirauto/dir/Gobuster/$wordlist.txt"

			if [ -n "$extension" ]; then
				if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
					command+=" -x $extension"	
				fi
			fi
			
			if [ -n "$response_codes" ]; then
				if [[ $response_codes =~ *[[:alpha:]]* ]] && [[ $response_codes =~ *[[:digit:]]* ]]; then
					command+=" -s $response_codes"	
				fi
			fi

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"	
				fi
			fi

			eval "$command"
		done
	fi

	if [ "$OPTION" == "vhost" ]; then
		local url="$2"
		local execution_rate="$6"

		IFS=";" read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			command="gobuster vhost -u $url -w $wordlist -o $(pwd)/Dirauto/vhost/Gobuster/$wordlist.txt"

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"	
				fi
			fi

			eval "$command"
		done
	fi

	if [ "$OPTION" == "subdomain" ]; then
		local url="$2"
		local execution_rate="$6"
	
		IFS=";" read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			command="gobuster dns -d $url -w $wordlist -i -o $(pwd)/Dirauto/subdomain/Gobuster/$wordlist.txt"

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"	
				fi
			fi

			eval "$command"
		done
	fi 

	if [ -z "$OPTION" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Option mode has not been selected\n"
	fi
}

run_FFuF() {
	local OPTION="$1"

	if [ "$OPTION" == "dir" ]; then
		local url="$2"
		local extension="$4"
		local response_codes="$5"
		local execution_rate="$6"
		
		IFS=";" read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			command="ffuf -c -w $wordlist -u $url/FUZZ -o $(pwd)/Dirauto/dir/FFuF/$wordlist.txt"
			
			if [ -n "$extension" ]; then
				if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
					command+=" -e $extension"
				fi
			fi 

			if [ -n "$response_codes" ]; then
				if [[ $response_codes =~ *[[:alpha:]]* ]] && [[ $response_codes =~ *[[:digit:]]* ]]; then
					command+=" -mc $response_codes"
				fi
			fi 

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"
				fi
			fi 
			
			eval "$command"
		done
	fi
	
	if [ "$OPTION" == "vhost" ]; then
		local url="$2"
		local execution_rate="$6"

		echo "Enter the name of the header for FUZZING (Example: \"Host: FUZZ.ffuf.com \"): "	
		read headerInput

		IFS=";" read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			command="ffuf -c -w $wordlist -H \"$headerInput\" -u $url -o $(pwd)/Dirauto/vhost/FFuF/$wordlist.txt"

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"
				fi
			fi 

			eval "$command"
		done
	fi

	if [ "$OPTION" == "subdomain" ]; then
		local url="$2"
		local execution_rate="$6"

		IFS=";" read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			command="ffuf -c -w $wordlist -u $url -H \"Host: FUZZ\" -o $(pwd)/Dirauto/subdomain/FFuF/$wordlist.txt"
		
			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"
				fi
			fi 

			eval "$command"
		done
	fi 

	if [ -z "$OPTION" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Option mode has not been selected\n"
	fi
}

run_dirsearch() {
	local OPTION="$1"

	if [ "$OPTION" == "dir" ]; then
		local url="$2"
		local extension="$4"
		local response_codes="$5"
		local execution_rate="$6"

		IFS=";" read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			command="dirsearch -u $url -o $(pwd)/Dirauto/dir/Dirsearch/$wordlist.txt"

			if [ -n "$extension" ]; then
				if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
					command+=" -e $extension"
				fi
			fi 

			if [ -n "$response_codes" ]; then
				if [[ $response_codes =~ *[[:alpha:]]* ]] && [[ $response_codes =~ *[[:digit:]]* ]]; then
					command+=" -i $response_codes"
				fi
			fi 

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"
				fi
			fi 

			eval "$command"
		done
	fi 

	if [ -z "$OPTION" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Option mode has not been selected\n"
	fi
	
}

run_feroxbuster() {
	local OPTION="$1"

	if [ "$OPTION" == "dir" ]; then
		local url="$2"
		local extension="$4"
		local response_codes="$5"
		local execution_rate="$6"
		
		IFS=";" read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			command="feroxbuster --url $url --wordlist $(pwd)/Dirauto/dir/Feroxbuster/$wordlist"	

			if [ -n "$extension" ]; then
				if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
					command+=" -x $extension"
				fi
			fi 

			if [ -n "$execution_rate" ]; then
				if [[ $execution_rate =~ *[[:digit:]]* ]]; then
					command+=" -t $execution_rate"
				fi
			fi 

			eval "$command"
		done
	fi 

	if [ -z "$OPTION" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Option mode has not been selected\n"
	fi
}

run_dirb() {
	local OPTION="$1"

	if [ "$OPTION" == "dir" ]; then
		local url="$2"
		local extension="$4"

		IFS=";" read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			command="dirb $url -o $(pwd)/Dirauto/dir/Dirb/$wordlist.txt"

			if [ -n "$extension" ]; then
				if [[ $extension =~ *[[:alpha:]]* ]] && [[ $extension =~ *[[:digit:]]* ]]; then
					command+=" -X $extension"
				fi
			fi 

			eval "$command"
		done
	fi 

	if [ -z "$OPTION" ]; then
		printf "${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} Option mode has not been selected\n"
	fi
}

# ---------------------------------------------------------------------------
# MODES
# ---------------------------------------------------------------------------
dir_mode() {
	input_check

	OPTION="dir"

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Initialized Directory Mode${ENDCOLOR}\n"

	if [ "$AUTO" == "true" ]; then
		automatic_dir_scan
	fi

	if [ "$GOBUSTER" == "true" ]; then
		run_gobuster "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$FFUF" == "true" ]; then
		run_FFuF "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$DIRSEARCH" == "true" ]; then
		run_dirsearch "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$FEROXBUSTER" == "true" ]; then
		run_feroxbuster "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$DIRB" == "true" ]; then
		run_dirb "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Completed Directory Mode${ENDCOLOR}"

	exit 1
}

# Subdomain 
subdomain_mode() {
	input_check

	OPTION="subdomain"

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Initialized Subdomain Mode${ENDCOLOR}\n"

	if [ "$AUTO" == "true" ]; then
		automatic_dir_scan
	fi

	if [ "$GOBUSTER" == "true" ]; then
		run_gobuster "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$FFUF" == "true" ]; then
		run_FFuF "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$DIRSEARCH" == "true" ]; then
		run_dirsearch "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$FEROXBUSTER" == "true" ]; then
		run_feroxbuster "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$DIRB" == "true" ]; then
		run_dirb "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Completed Subdomain Mode${ENDCOLOR}"

	exit 1
}

# VHost
vhost_mode() {
	input_check

	OPTION="vhost"

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Initialized VHost Mode${ENDCOLOR}\n"

	if [ "$AUTO" == "true" ]; then
		automatic_dir_scan
	fi

	if [ "$GOBUSTER" == "true" ]; then
		run_gobuster "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$FFUF" == "true" ]; then
		run_FFuF "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$DIRSEARCH" == "true" ]; then
		run_dirsearch "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$FEROXBUSTER" == "true" ]; then
		run_feroxbuster "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	if [ "$DIRB" == "true" ]; then
		run_dirb "$OPTION" "$URL" "$wordlist" "$EXTENSIONS" "$STATUS_CODES" "$THREADS"
	fi

	printf "${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Completed VHost Mode${ENDCOLOR}"

	exit 1
}
