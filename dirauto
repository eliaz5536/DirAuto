#!/bin/bash
#================================================================
# HEADER
#================================================================
# Script Name   : dirauto
# Description   : Customizable directory scan that enumerates 
# 		:  subdomain through content-discovery
# Author        : Eliaz Simon
# Date          : <INSERT DATE HERE>
# Version       : 1.0
# Usage         : ./dirauto -i <target_host>
# Notes         : Ensure you install all tools to use this script
# Dependencies  : See README.md for more info on installation
#================================================================
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#================================================================

# Capture the current time
current_time=$(date +"%T")

###############################################################
# ANSI Color Code Escape Sequences			      #
###############################################################
BLACK="\e[30m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
LIGHT_GRAY="\e[37m"
GRAY="\e[90m"
LIGHT_RED="\e[91m"
LIGHT_GREEN="\e[92m"
LIGHT_YELLOW="\e[93m"
LIGHT_BLUE="\e[94m"
LIGHT_MAGENTA="\e[95m"
LIGHT_CYAN="\e[96m"
WHITE="\e[97m"
ENDCOLOR="\e[0m"

# Bold 
BOLD_BLACK="\e[1;30m"
BOLD_RED="\e[1;31m"
BOLD_GREEN="\e[1;32m"
BOLD_YELLOW="\e[1;33m"
BOLD_BLUE="\e[1;34m"
BOLD_MAGENTA="\e[1;35m"
BOLD_CYAN="\e[1;36m"
BOLD_LIGHT_GRAY="\e[1;37m"
BOLD_GRAY="\e[1;90m"
BOLD_LIGHT_RED="\e[1;91m"
BOLD_LIGHT_GREEN="\e[1;92m"
BOLD_LIGHT_YELLOW="\e[1;93m"
BOLD_LIGHT_BLUE="\e[1;94m"
BOLD_LIGHT_MAGENTA="\e[1;95m"
BOLD_LIGHT_CYAN="\e[1;96m"
BOLD_WHITE="\e[1;97m"

# Italic
ITALIC_BLACK="\e[3;30m"
ITALIC_RED="\e[3;31m"
ITALIC_GREEN="\e[3;32m"
ITALIC_YELLOW="\e[3;33m"
ITALIC_BLUE="\e[3;34m"
ITALIC_MAGENTA="\e[3;35m"
ITALIC_CYAN="\e[3;36m"
ITALIC_LIGHT_GRAY="\e[3;37m"
ITALIC_GRAY="\e[3;90m"
ITALIC_LIGHT_RED="\e[3;91m"
ITALIC_LIGHT_GREEN="\e[3;92m"
ITALIC_LIGHT_YELLOW="\e[3;93m"
ITALIC_LIGHT_BLUE="\e[3;94m"
ITALIC_LIGHT_MAGENTA="\e[3;95m"
ITALIC_LIGHT_CYAN="\e[3;96m"
ITALIC_WHITE="\e[3;97m"

# Background Color
BLACK_BG="\e[40m"
RED_BG="\e[41m"
GREEN_BG="\e[42m"
YELLOW_BG="\e[43m"
BLUE_BG="\e[44m"
MAGENTA_BG="\e[45m"
CYAN_BG="\e[46m"
WHITE_BG="\e[47m"

# Styles
BOLD="\e[1m"
ITALIC="\e[3m"

# Banner
echo "
┳┓•  ┏┓     
┃┃┓┏┓┣┫┓┏╋┏┓
┻┛┗┛ ┛┗┗┻┗┗┛
"

#================================================================
# FUNCTION: info
# DESCRIPTION:
#     Prints info message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
info() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: important_info
# DESCRIPTION:
#     Prints important info message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
important_info() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: success
# DESCRIPTION:
#     Prints success message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
success() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}SUCCESS${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: warning
# DESCRIPTION:
#     Prints warning message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
warning() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: important_warning
# DESCRIPTION:
#     Prints important warning message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
important_warning() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: error
# DESCRIPTION:
#     Prints error message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
error() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}$1${ENDCOLOR}\n"
}

#================================================================
# FUNCTION: important_error
# DESCRIPTION:
#     Prints important error message using the provided parameter.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
important_error() {
	local message=$1
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}$1${ENDCOLOR}\n"
}

###############################################################
# Help & Usage                                                # 
###############################################################
#================================================================
# FUNCTION: usage
# DESCRIPTION:
#     Prints default usage information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto [modes] [options]"
	echo " "
}

#================================================================
# FUNCTION: help
# DESCRIPTION:
#     Prints default help information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
help()
{
	usage
        echo "Options:"
       	printf "  ${BOLD}--usage${ENDCOLOR}						Show usage information\n"
        printf "  ${BOLD}-h, --help${ENDCOLOR}						Show help message\n"
        printf "  ${BOLD}-u, --url${ENDCOLOR}						Specify target URL\n"
        printf "  ${BOLD}-x, --extensions${ENDCOLOR}					Specify extensions\n"
        printf "  ${BOLD}-p, --programs${ENDCOLOR}					Specify enumeration programs\n"
        printf "  ${BOLD}-c, --status-codes${ENDCOLOR}					Specify status codes\n"
        printf "  ${BOLD}-w, --wordlist${ENDCOLOR}					Specify wordlist\n"
        printf "  ${BOLD}--check${ENDCOLOR}						Check if repositories are installed\n"
        echo " "
        echo "Modes:"
        printf "  ${BOLD}dir${ENDCOLOR}							Directory Mode\n"
        printf "  ${BOLD}vhost${ENDCOLOR}							Virtual Host Mode\n"
        printf "  ${BOLD}subdomain${ENDCOLOR}						Subdomain Mode\n"
        echo " "
        echo "Enumeration Programs:"
        printf "  ${BOLD}gobuster${ENDCOLOR}						Directory/File, DNS and VHost busting tool written in Go\n"
        printf "  ${BOLD}ffuf${ENDCOLOR}							Fast web fuzzer written in Go\n"
        printf "  ${BOLD}feroxbuster${ENDCOLOR}						A fast, simple, recursive content discovery tool written in Rust\n"
        printf "  ${BOLD}dirsearch${ENDCOLOR}						Web path scanner\n"
        printf "  ${BOLD}dirb${ENDCOLOR}							Web content scanner\n"
        echo " "
        echo "Filter Options:"
        printf "  ${BOLD}-fs, --filter-status <status_codes>${ENDCOLOR} 			Filters HTTP status codes\n"
        printf "  ${BOLD}-fl, --filter-lines <line_count>${ENDCOLOR}			Filters line count\n"
        printf "  ${BOLD}-fs, --filter-size <content_size>${ENDCOLOR}			Filters content size\n"
        printf "  ${BOLD}-fw, --filter-words <word_count>${ENDCOLOR}			Filters word count\n"
	exit 0
}

#================================================================
# FUNCTION: dir_usage
# DESCRIPTION:
#     Prints directory usage information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dir_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto dir [options]"
	echo " "
}

#================================================================
# FUNCTION: dir_help
# DESCRIPTION:
#     Prints directory help information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dir_help() {
	dir_usage
        echo "Directory mode help:"
       	printf "  ${BOLD}--usage${ENDCOLOR}						Show usage information\n"
        printf "  ${BOLD}-h, --help${ENDCOLOR}						Show help information\n"
        printf "  ${BOLD}-u, --url <URL>${ENDCOLOR}					Specify target URL\n"
        printf "  ${BOLD}-x, --extensions <ext>${ENDCOLOR}				Specify file extensions\n"
        printf "  ${BOLD}-p, --programs${ENDCOLOR}					Specify enumeration programs\n"
        printf "  ${BOLD}-w, --wordlist <file>${ENDCOLOR}					Specify wordlist\n"
        printf "  ${BOLD}--auto${ENDCOLOR}						Enable auto mode\n"
	echo " "
        echo "Enumeration Programs:"
        printf "  ${BOLD}gobuster${ENDCOLOR}						Directory/File, DNS and VHost busting tool written in Go\n"
        printf "  ${BOLD}ffuf${ENDCOLOR}							Fast web fuzzer written in Go\n"
        printf "  ${BOLD}feroxbuster${ENDCOLOR}						A fast, simple, recursive content discovery tool written in Rust\n"
        printf "  ${BOLD}dirsearch${ENDCOLOR}						Web path scanner\n"
        printf "  ${BOLD}dirb${ENDCOLOR}							Web content scanner\n"
	echo " "
        echo "Filter Options:"
        printf "  ${BOLD}-fs, --filter-status <status_codes>${ENDCOLOR} 			Filters HTTP status codes\n"
        printf "  ${BOLD}-fl, --filter-lines <line_count>${ENDCOLOR}			Filters line count\n"
        printf "  ${BOLD}-fs, --filter-size <content_size>${ENDCOLOR}			Filters content size\n"
        printf "  ${BOLD}-fw, --filter-words <word_count>${ENDCOLOR}			Filters word count\n"
        echo " "
	exit 0
}

#================================================================
# FUNCTION: vhost_usage
# DESCRIPTION:
#     Prints virtual host usage information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
vhost_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto vhost [modes]"
	echo " "
}

#================================================================
# FUNCTION: vhost_help
# DESCRIPTION:
#     Prints virtual host help information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
vhost_help() {
	vhost_usage
        echo "Virtual host mode help:"
       	printf "  ${BOLD}--usage${ENDCOLOR}						Show usage information\n"
        printf "  ${BOLD}-h, --help${ENDCOLOR}						Show help information\n"
        printf "  ${BOLD}-u, --url <URL>${ENDCOLOR}					Specify target URL\n"
        printf "  ${BOLD}-x, --extensions <ext>${ENDCOLOR}				Specify file extensions\n"
        printf "  ${BOLD}-p, --programs${ENDCOLOR}					Specify enumeration programs\n"
        printf "  ${BOLD}-w, --wordlist <file>${ENDCOLOR}					Specify wordlist\n"
        printf "  ${BOLD}--auto${ENDCOLOR}						Enable auto mode\n"
	echo " "
        echo "Enumeration Programs:"
        printf "  ${BOLD}gobuster${ENDCOLOR}						Directory/File, DNS and VHost busting tool written in Go\n"
        printf "  ${BOLD}ffuf${ENDCOLOR}							Fast web fuzzer written in Go\n"
        printf "  ${BOLD}feroxbuster${ENDCOLOR}						A fast, simple, recursive content discovery tool written in Rust\n"
        printf "  ${BOLD}dirsearch${ENDCOLOR}						Web path scanner\n"
        printf "  ${BOLD}dirb${ENDCOLOR}							Web content scanner\n"
	echo " "
        echo "Filter Options:"
        printf "  ${BOLD}-fs, --filter-status <status_codes>${ENDCOLOR} 			Filters HTTP status codes\n"
        printf "  ${BOLD}-fl, --filter-lines <line_count>${ENDCOLOR}			Filters line count\n"
        printf "  ${BOLD}-fs, --filter-size <content_size>${ENDCOLOR}			Filters content size\n"
        printf "  ${BOLD}-fw, --filter-words <word_count>${ENDCOLOR}			Filters word count\n"
        echo " "
	exit 0
}

#================================================================
# FUNCTION: dns_usage
# DESCRIPTION:
#     Prints DNS / subdomain usage information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dns_usage() {
        echo "Directory Enumeration Automator with Gobuster, FFuF, Feroxbuster, DirSearch & Dirb"
	echo " "
	echo "Usage: dirauto dns [options]"
	echo " "
}

#================================================================
# FUNCTION: dns_help
# DESCRIPTION:
#     Prints DNS / subdomain help information.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dns_help() { 
	dns_usage
        echo "DNS mode help:"
       	printf "  ${BOLD}--usage${ENDCOLOR}						Show usage information\n"
        printf "  ${BOLD}-h, --help${ENDCOLOR}						Show help information\n"
        printf "  ${BOLD}-u, --url${ENDCOLOR}						Specify target URL\n"
        printf "  ${BOLD}-x, --extensions${ENDCOLOR}					Specify file extensions\n"
        printf "  ${BOLD}-p, --programs${ENDCOLOR}					Specify enumeration programs\n"
        printf "  ${BOLD}-w, --wordlist${ENDCOLOR}					Specify wordlist\n"
        printf "  ${BOLD}--auto${ENDCOLOR}						Enable auto mode\n"
	echo " "
        echo "Enumeration Programs:"
        printf "  ${BOLD}gobuster${ENDCOLOR}						Directory/File, DNS and VHost busting tool written in Go\n"
        printf "  ${BOLD}ffuf${ENDCOLOR}							Fast web fuzzer written in Go\n"
        printf "  ${BOLD}feroxbuster${ENDCOLOR}						A fast, simple, recursive content discovery tool written in Rust\n"
        printf "  ${BOLD}dirsearch${ENDCOLOR}						Web path scanner\n"
        printf "  ${BOLD}dirb${ENDCOLOR}							Web content scanner\n"
	echo " "
        echo "Filter Options:"
        printf "  ${BOLD}-fs, --filter-status <status_codes>${ENDCOLOR} 			Filters HTTP status codes\n"
        printf "  ${BOLD}-fl, --filter-lines <line_count>${ENDCOLOR}			Filters line count\n"
        printf "  ${BOLD}-fs, --filter-size <content_size>${ENDCOLOR}			Filters content size\n"
        printf "  ${BOLD}-fw, --filter-words <word_count>${ENDCOLOR}			Filters word count\n"
        echo " "
	exit 0
}

# ===========================================================================
# Checking Conditions... 
# ===========================================================================
#================================================================
# FUNCTION: check
# DESCRIPTION:
#     Check if binaries are located in /usr/bin directory.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
check() {
	if ! [ -f /usr/bin/gobuster ]; then
		error "Gobuster is not located in /usr/bin. Install Gobuster."
		exit 1
	fi 
	important_info "Gobuster is located in /usr/bin directory."

	if ! [ -f /usr/bin/ffuf ]; then
		error "FFuF is not located in /usr/bin. Install FFuF."
		exit 1
	fi 
	important_info "FFuF is located in /usr/bin directory."

	if ! [ -f /usr/bin/feroxbuster ]; then
		error "FeroxBuster is not located in /usr/bin. Install FeroxBuster."
		exit 1
	fi 
	important_info "Feroxbuster is located in /usr/bin directory."

	if ! [ -f /usr/bin/dirsearch ]; then
		error "Dirsearch is not located in /usr/bin. Install Dirsearch."
		exit 1
	fi 
	important_info "Dirsearch is located in /usr/bin directory."

	if ! [ -f /usr/bin/dirb ]; then
		error "Dirb is not located in /usr/bin. Install Dirb,"
		exit 1
	fi 
	important_info "Dirb is located in /usr/bin directory."

	if ! [ -d /usr/share/seclists ] || [ -d /usr/share/wordlist/seclists ]; then
		error "Seclists is not located in /usr/share directory. Install Seclists."
		exit 1
	fi 
	important_info "Seclists is located in /usr/share directories."

	success "All of the repositories are installed in your system. You are ready to enumerate!"

	exit 1
}

#================================================================
# FUNCTION: search_wordlist
# DESCRIPTION:
#     Search the name of wordlist through /usr/share/seclists directory.
# PARAMETERS:
#     $1 - Specified wordlist
# RETURNS:
#     None
#================================================================
search_wordlist() {
	local wordlist_name="$1"

	wordlist_path=$(find /usr/share/seclists -type f -name "$wordlist_name" 2>/dev/null | head -n 1)

    	if [ -n "$wordlist_path" ]; then
		echo $wordlist_path
		return 0
	else 
		return 1
	fi
}

#================================================================
# FUNCTION: input_check
# DESCRIPTION:
#     Checks global variables that are specified before scan
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
input_check() {
	# ---------------------------------------------------------------------------
	# Target URL
	# ---------------------------------------------------------------------------
	if [ -z "$URL" ]; then
		error "Missing URL address. Please specify the URL using the -u or --url option."
		exit 1
	fi
	important_info "Target: $URL"

	# ---------------------------------------------------------------------------
	# PROGRAMS
	# ---------------------------------------------------------------------------
	if [ -z "$PROGRAMS" ]; then
		error "Enumeration program not selected."	
		exit 1
	fi

	match_found=0
	enumeration_programs=("gobuster" "ffuf" "feroxbuster" "dirsearch" "dirb")
	IFS="," read -r -a ENUMERATION_PROGRAMS <<< "$PROGRAMS"
	for program in ${ENUMERATION_PROGRAMS[@]}; do
		info "Enumeration Program selected: $program"
		match_found=1
	done
	if [[ $match_found -eq 0 ]]; then
		error "The program you specified does not match with any other enumeration programs listed from this script."
		exit 1
	fi

	# ---------------------------------------------------------------------------
	# HOST (VHOST MODE)
	# ---------------------------------------------------------------------------
	if [[ -n "$HOST" ]]; then
		if echo "$PROGRAMS" | grep -q "\bffuf\b"; then
			if ! echo "$HOST" | grep -q "\bFUZZ\b"; then
				error "Host string must contain the word 'FUZZ' in order to enumerate subdomains"
				exit 1
			fi	
			info "Host (FFuF): $HOST"
		fi
	fi

	# ---------------------------------------------------------------------------
	# WORDLIST
	# ---------------------------------------------------------------------------
	if [[ -n "$WORDLISTS" ]]; then
		if ! [ -d /usr/share/seclists ] || [ -d /usr/share/wordlist/seclists ]; then
			error "Seclists is not located in /usr/share directory. Install Seclists."
			exit 1
		fi 

		# Loop through each wordlist from here before initializing
		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	
			if [ -z "$wordlist_path" ]; then
				error "Wordlist not found."
				exit 1
			fi
			info "Found selected wordlist: $wordlist_path"
		done
	else 
		error "Wordlist has not been selected."
		exit 1
	fi

	# ---------------------------------------------------------------------------
	# EXTENSIONS
	# ---------------------------------------------------------------------------
	if [[ -n "$EXTENSIONS" ]]; then
		if ! [[ $EXTENSIONS =~ ^[a-zA-Z0-9.,]+$ ]]; then
			error "Status codes must not contain any special characters"
			exit 1
		fi	
		info "Extensions: $EXTENSIONS"
	fi

	# ---------------------------------------------------------------------------
	# FITLER ARGUMENTS
	# ---------------------------------------------------------------------------
	# Filter HTTP Status Codes
	if [[ -n "$FILTER_HTTP" ]]; then
		if ! [[ $FILTER_HTTP =~ ^[0-9]+$  || $FILTER_HTTP =~ ^[0-9]+,[0-9]+$ ]]; then
			error "HTTP status code filter must contain only integers and a comma if more than one HTTP filter request is listed."
		fi
		info "HTTP Status Code Filter: $FILTER_HTTP"
	fi

	# Filter Line Count
	if [[ -n "$FILTER_LINE_COUNT" ]]; then
		if ! [[ $FILTER_LINE_COUNT =~ ^[0-9]+$ ]]; then
			error "Line count filter must contain only integers."
		fi
		info "Line Count Filter: $FILTER_LINES"
	fi

	# Filter Content Size
	if [[ -n "$FILTER_SIZE" ]]; then
		if ! [[ $FILTER_SIZE =~ ^[0-9]+$ ]]; then
			error "Content size filter must contain only integers."
		fi
		info "Content Size Filter: $FILTER_SIZE"
	fi

	# Filter Word Count
	if [[ -n "$FILTER_WORD_COUNT" ]]; then
		if ! [[ $FILTER_WORD_COUNT =~ ^[0-9]+$ ]]; then
			error "Word count filter must contain only integers."
		fi
		info "Word Count Filter: $FILTER_WORDS"
	fi
}

#================================================================
# FUNCTION: directory_check
# DESCRIPTION:
#     Checks if a created directory path exists on the system for scan.
# PARAMETERS:
#     $1 - The directory path
#     $2 - The name of the scan
# RETURNS:
#     None
#================================================================
directory_check() {
	local path=$1
	local scan=$2

	if [[ -d $1 ]]; then
		echo " "
		info "Created $2 output directory of target live host under '$1'"
	else
		echo " "
		warning "Failed to create $2 output directory of target live host under '$1'"
	fi
}

#================================================================
# FUNCTION: file_check
# DESCRIPTION:
#     Checks if a generated file exists on the system for scan.
# PARAMETERS:
#     $1 - The file path
#     $2 - The name of the scan
# RETURNS:
#     None
#================================================================
file_check() {
	local path=$1
	local scan=$2

	if [[ -e $1 ]]; then
		echo " "
		success "Generated output data for $2 of target live host under '$1'"
	else
		echo " "
		warning "Failed to generate output data for $2 of target live host under '$1'"
	fi
}

###############################################################
# Directory Enumeration Selection Option                      #
###############################################################
#================================================================
# FUNCTION: auto_dir_scan
# DESCRIPTION:
#     Performs automatic directory scan on target URL.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
auto_dir_scan() {
	# You can customize your automatic directory scan in this function
	
	important_info "Performing Automatic Directory Enumeration Scan"

	mkdir -p Dirauto/auto/dir/ffuf
	directory_check "$(pwd)/Dirauto/auto/dir/FFuF" "FFuF auto directory"

	mkdir -p Dirauto/auto/dir/feroxbuster
	directory_check "$(pwd)/Dirauto/auto/dir/Feroxbuster" "Feroxbuster auto directory"

	wordlist_path=$(search_wordlist "directory-list-2.3-small.txt")
	if [ -z "$wordlist_path" ]; then
		error "directory-list-2.3-small.txt.txt wordlist not found"
	else
		info "Found directory-list-2.3-small.txt wordlist"

		important_info "Performing FFuF Auto Directory scan using $wordlist_path"
		ffuf -c -w $wordlist_path -u $URL/FUZZ -o $(pwd)/Dirauto/auto/dir/ffuf/ffuf.txt
		
		file_check "$(pwd)/Dirauto/auto/dir/ffuf/ffuf.txt" "FFuF auto directory scan"
	fi

	echo " "

	wordlist_path=$(search_wordlist "raft-medium-directories.txt")
	if [ -z "$wordlist_path" ]; then
		error "raft-medium-directories.txt wordlist not found"
	else 
		info "Found raft-medium-directories.txt wordlist"

		important_info "Performing FeroxBuster Auto Directory scan using $wordlist_path"
		feroxbuster -u $URL --output $(pwd)/Dirauto/auto/dir/feroxbuster/feroxbuster.txt

		file_check "$(pwd)/Dirauto/auto/dir/feroxbuster/feroxbuster.txt" "Feroxbuster auto directory scan"
	fi

	echo " "

	success "Completed Automatic Directory Enumeration Scan"

	exit 0
}

#================================================================
# FUNCTION: auto_vhost_scan
# DESCRIPTION:
#     Performs automatic vhost scan on target URL.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
auto_vhost_scan() {
	# You can customize your automatic vhost scan using this function
	important_info "Performing Automatic Virtual Host Enumeration Scan"

	mkdir -p Dirauto/auto/vhost/gobuster
	directory_check "$(pwd)/Dirauto/auto/vhost/gobuster" "Gobuster auto virtual host"
	mkdir -p Dirauto/auto/vhost/ffuf
	directory_check "$(pwd)/Dirauto/auto/vhost/ffuf" "FFuF auto virtual host"

	wordlist_path=$(search_wordlist "subdomains-top1million-5000.txt")
	if [ -z "$wordlist_path" ]; then
		error "subdomains-top1million-5000.txt wordlist not found"
	else
		info "Found subdomains-top1million-5000.txt wordlist"

		gobuster_command="gobuster vhost -u $URL -w $wordlist_path -o $(pwd)/Dirauto/auto/vhost/gobuster/gobuster.txt"
		if [ -n "$FILTER_SIZE" ]; then
			gobuster_command+=" --exclude-length $FILTER_SIZE"
		fi

		important_info "Performing FeroxBuster Auto Directory scan using $wordlist_path"
		eval "$gobuster_command"

		file_check "$(pwd)/Dirauto/auto/vhost/gobuster/gobuster.txt" "GoBuster auto virtual host scan"

		echo " "

		ffuf_command="ffuf -u $URL -H \"$HOST\" -w $wordlist_path -o $(pwd)/Dirauto/auto/vhost/ffuf/ffuf.txt"
		if [ -n "$FILTER_SIZE" ]; then
			ffuf_command+=" -fs $FILTER_SIZE"
		fi

		important_info "Performing FFuF Auto virtual host scan using $wordlist_path"
		eval "$ffuf_command"

		file_check "$(pwd)/Dirauto/auto/vhost/ffuf/ffuf.txt" "FFuF auto virtual host scan"
	fi

	echo " "

	success "Completed Automatic Virtual Host Enumeration Scan"
}

#================================================================
# FUNCTION: auto_dns_scan
# DESCRIPTION:
#     Performs DNS scan on target host.
# PARAMETERS:
#     $1 - A message
# RETURNS:
#     None
#================================================================
auto_dns_scan() {
	# You can customize your automatic DNS scan using this function
	important_info "Performing Automatic DNS Enumeration Scan"

	mkdir -p Dirauto/auto/dns/dig
	directory_check "$(pwd)/Dirauto/auto/dns/dig" "dig auto DNS"
	mkdir -p Dirauto/auto/dns/gobuster
	directory_check "$(pwd)/Dirauto/auto/dns/gobuster" "GoBuster auto DNS"

	if [ -z "$DOMAIN_NAME" ]; then
		error "Domain name is required to gather DNS information"
	else
		important_info "Performing dig auto DNS scan"
		dig_command="dig axfr $DOMAIN_NAME @$URL | tee $(pwd)/Dirauto/auto/dns/dig/dig.txt"	
		eval "$dig_command"

		file_check "$(pwd)/Dirauto/auto/dns/dig/dig.txt" "Dig auto virtual host scan"

		echo " "
	fi	

	info "Initializing Gobuster..."
	wordlist_path=$(search_wordlist "subdomains-top1million-20000.txt")
	if [ -z "$subdomains_path" ]; then
		error "subdomains-top1million-20000.txt wordlist not found"
	else
		info "Found subdomains-top1million-20000.txt wordlist"

		gobuster_command="gobuster vhost -u http://$DOMAIN_NAME --append-domain -w $wordlist_path -o $(pwd)/Dirauto/auto/dns/gobuster/gobuster.txt"

		file_check "$(pwd)/Dirauto/auto/dns/gobuster/gobuster.txt" "GoBuster auto DNS scan"

		important_info "Performing GoBuster auto DNS scan using $wordlist_path"
		eval "$gobuster_command"
	fi

	echo " "

	success "Completed Automatic DNS Scan"
}

###############################################################
# Enumeration Programs                                        #
###############################################################
#================================================================
# FUNCTION: run_gobuster
# DESCRIPTION:
#     Performs selected enumeration scan using GoBuster.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_gobuster() {
	if [ "$OPTION" == "dir" ]; then
		mkdir -p Dirauto/manual/dir/gobuster
		directory_check "$(pwd)/Dirauto/manual/dir/gobuster" "manual GoBuster directory"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dir/gobuster/$wordlist"

			command="gobuster dir -u $URL -w $wordlist_path -o $(pwd)/Dirauto/manual/dir/gobuster/$wordlist"

			if [[ -n "$EXTENSIONS" ]]; then
				command+=" -x $EXTENSIONS"	
			fi

			if [[ -n "$FILTER_HTTP" ]]; then
				command+=" -b $FILTER_HTTP" # Blacklists status codes
			fi	

			if [[ -n "$FILTER_SIZE" ]]; then
				command+=" --exclude-length $FILTER_SIZE"
			fi	
			
			eval "$command"
			
			file_check "$(pwd)/Dirauto/manual/dir/gobuster/$wordlist" "GoBuster directory scan"

		done
	fi

	if [ "$OPTION" == "vhost" ]; then
		mkdir -p Dirauto/manual/vhost/gobuster
		directory_check "$(pwd)/Dirauto/manual/vhost/gobuster" "manual GoBuster vhost"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/vhost/gobuster/$wordlist"

			command="gobuster vhost -u $URL -w $wordlist_path -o $(pwd)/Dirauto/manual/vhost/gobuster/$wordlist"

			if [[ -n "$FILTER_HTTP" ]]; then
				command+=" -b $FILTER_HTTP" # Blacklists status codes
			fi	

			if [[ -n "$FILTER_SIZE" ]]; then
				command+=" --exclude-length $FILTER_SIZE"	
			fi

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/vhost/gobuster/$wordlist" "GoBuster vhost scan"
		done
	fi

	if [ "$OPTION" == "dns" ]; then
		mkdir -p Dirauto/manual/dns/gobuster
		directory_check "$(pwd)/Dirauto/manual/dns/gobuster" "manual GoBuster dns"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dns/gobuster/$wordlist"

			command="gobuster dns -d $URL -w $wordlist_path -i -o $(pwd)/Dirauto/manual/dns/gobuster/$wordlist"

			if [[ -n "$FILTER_HTTP" ]]; then
				command+=" -b $FILTER_HTTP" # Blacklists status codes
			fi	

			if [[ -n "$FILTER_SIZE" ]]; then
				command+=" --exclude-length $FILTER_SIZE"	
			fi


			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dns/gobuster/$wordlist" "GoBuster dns scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

#================================================================
# FUNCTION: run_FFuF
# DESCRIPTION:
#     Performs selected enumeration scan using FFuF.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_FFuF() {
	if [ "$OPTION" == "dir" ]; then
		mkdir -p Dirauto/manual/dir/ffuf
		directory_check "$(pwd)/Dirauto/manual/dir/ffuf" "manual FFuF directory"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	
			
			touch "$(pwd)/Dirauto/manual/dir/ffuf/$wordlist"

			command="ffuf -c -w $wordlist_path -u $URL/FUZZ -o $(pwd)/Dirauto/manual/dir/ffuf/$wordlist"
			
			if [ -n "$EXTENSIONS" ]; then
				command+=" -e $EXTENSIONS"
			fi 

			if [[ -n "$FILTER_HTTP" ]]; then
				command+=" -fc $FILTER_HTTP"
			fi	

			if [[ -n "$FILTER_LINES" ]]; then
				command+=" -fl $FILTER_LINES"
			fi	

			if [[ -n "$FILTER_SIZE" ]]; then
				command+=" -fs $FILTER_SIZE"
			fi	
			
			if [[ -n "$FILTER_WORDS" ]]; then
				command+=" -fw $FILTER_WORDS"
			fi	

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dir/ffuf/$wordlist" "FFuF directory scan"
		done
	fi
	
	if [ "$OPTION" == "vhost" ]; then
		mkdir -p Dirauto/manual/vhost/ffuf
		directory_check "$(pwd)/Dirauto/manual/vhost/ffuf" "manual FFuF vhost"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/vhost/ffuf/$wordlist"	

			command="ffuf -c -w $wordlist_path -H \"$HOST\" -u $URL -o $(pwd)/Dirauto/manual/vhost/ffuf/$wordlist"

			if [ -n "$EXTENSIONS" ]; then
				command+=" -e $EXTENSIONS"
			fi 

			if [[ -n "$FILTER_HTTP" ]]; then
				command+=" -fc $FILTER_HTTP"
			fi	

			if [[ -n "$FILTER_LINES" ]]; then
				command+=" -fl $FILTER_LINES"
			fi	

			if [[ -n "$FILTER_SIZE" ]]; then
				command+=" -fs $FILTER_SIZE"
			fi	
			
			if [[ -n "$FILTER_WORDS" ]]; then
				command+=" -fw $FILTER_WORDS"
			fi	

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/vhost/ffuf/$wordlist" "FFuF vhost scan"
		done
	fi

	if [ "$OPTION" == "dns" ]; then
		mkdir -p Dirauto/manual/dns/ffuf
		directory_check "$(pwd)/Dirauto/manual/dns/ffuf" "manual FFuF dns"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	
	
			touch "$(pwd)/Dirauto/manual/dns/ffuf/$wordlist"

			command="ffuf -c -w $wordlist_path -H \"$HOST\" -u $URL -o $(pwd)/Dirauto/manual/vhost/ffuf/$wordlist"
		
			if [ -n "$EXTENSIONS" ]; then
				command+=" -e $EXTENSIONS"
			fi 

			if [[ -n "$FILTER_HTTP" ]]; then
				command+=" -fc $FILTER_HTTP"
			fi	

			if [[ -n "$FILTER_LINES" ]]; then
				command+=" -fl $FILTER_LINES"
			fi	

			if [[ -n "$FILTER_SIZE" ]]; then
				command+=" -fs $FILTER_SIZE"
			fi	
			
			if [[ -n "$FILTER_WORDS" ]]; then
				command+=" -fw $FILTER_WORDS"
			fi	

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dns/ffuf/$wordlist" "FFuF dns scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

#================================================================
# FUNCTION: run_dirsearch
# DESCRIPTION:
#     Performs selected enumeration scan using DirSearch.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_dirsearch() {
	if [ "$OPTION" == "dir" ]; then
		mkdir -p Dirauto/manual/dir/dirsearch
		directory_check "$(pwd)/Dirauto/manual/dir/dirsearch" "manual dirsearch directory"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dir/dirsearch/$wordlist"	

			command="dirsearch -u $URL -w $wordlist_path -o $(pwd)/Dirauto/manual/dir/dirsearch/$wordlist"

			if [[ -n "$EXTENSIONS" ]]; then
				command+=" -e $EXTENSIONS"
			fi 

			if [[ -n "$FITLER_HTTP" ]]; then
				command+=" -x $FILTER_HTTP"
			fi 

			if [[ -n "$FILTER_SIZE" ]]; then
				command+=" --exclude-sizes=$FILTER_SIZE"	
			fi

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dir/dirsearch/$wordlist" "Dirsearch directory scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

#================================================================
# FUNCTION: run_feroxbuster
# DESCRIPTION:
#     Performs selected enumeration scan using FeroxBuster.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_feroxbuster() {
	if [ "$OPTION" == "dir" ]; then
		mkdir -p Dirauto/manual/dir/feroxbuster
		directory_check "$(pwd)/Dirauto/manual/dir/feroxbuster" "manual feroxbuster directory"

		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dir/feroxbuster/$wordlist"
				
			command="feroxbuster --url $URL --wordlist $wordlist_path --output $(pwd)/Dirauto/manual/dir/feroxbuster/$wordlist"	

			if [ -n "$EXTENSIONS" ]; then
				command+=" -x $EXTENSIONS"
			fi 

			if [[ -n "$FILTER_HTTP" ]]; then
				command+=" -s $FILTER_HTTP"
			fi

			if [[ -n "$FILTER_SIZE" ]]; then
				command+=" -S $FILTER_SIZE"
			fi

			if [[ -n "$FILTER_WORDS" ]]; then
				command+=" -W $FILTER_WORDS"
			fi

			if [[ -n "$FILTER_LINES" ]]; then
				command+=" -N $FILTER_LINES"
			fi

			eval "$command"

			file_check "$(pwd)/Dirauto/manual/dir/feroxbuster/$wordlist" "FeroxBuster directory scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

#================================================================
# FUNCTION: run_dirb
# DESCRIPTION:
#     Performs selected enumeration scan using FeroxBuster.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_dirb() {
	mkdir -p Dirauto/manual/dir/dirb
	directory_check "$(pwd)/Dirauto/manual/dir/dirb" "manual dirb directory"

	if [ "$OPTION" == "dir" ]; then
		IFS="," read -r -a FILES <<< "$WORDLISTS"
		for wordlist in ${FILES[@]}; do
			wordlist_path=$(search_wordlist "$wordlist")	

			touch "$(pwd)/Dirauto/manual/dir/dirb/$wordlist"

			command="dirb $URL -w $wordlist_path -o $(pwd)/Dirauto/manual/dir/dirb/$wordlist"

			if [[ -n "$EXTENSIONS" ]]; then
				command+=" -X $EXTENSIONS"
			fi 

			if [[ -n "$FILTER_HTTP" ]]; then
				command+=" -N $FILTER_HTTP"
			fi

			eval "$command"

			file_check "$(pwd)/Dirauto/dir/manual/dirb/$wordlist" "Dirb directory scan"
		done
	fi 

	if [ -z "$OPTION" ]; then
		error "Option mode has not been selected"
	fi
}

# ---------------------------------------------------------------------------
# MODES
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# Directory Mode
# ---------------------------------------------------------------------------
#================================================================
# FUNCTION: dir_mode
# DESCRIPTION:
#     Processes parameters in directory mode.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dir_mode() {
	while [[ "$#" -gt 0 ]]; do
		case $1 in
			-h|--help) dir_help ;;
			--usage) dir_usage ;;
			-u|--url) URL="$2"; shift ;;
			-p|--programs) PROGRAMS="$2"; shift ;;
			-x|--extensions) EXTENSIONS="$2"; shift ;;
			-fc|--filter-status) FILTER_HTTP="$2"; shift ;;
			-fl|--filter-lines) FILTER_LINES="$2"; shift ;;
			-fs|--filter-size) FILTER_SIZE="$2"; shift ;;
			-fw|--filter-words) FILTER_WORDS="$2"; shift ;;
			-w|--wordlists) WORDLISTS="$2"; shift ;;
			--auto) AUTO=true; shift ;; 
			*) error "Unknown Paramter Passed: $1"; exist 1 ;;
		esac
		shift
	done

	input_check

	OPTION="dir"

	info "Initialized Directory Mode"
	run_program
	success "Completed Directory Mode"

	exit 0
}

# ---------------------------------------------------------------------------
# Subdomain Mode
# ---------------------------------------------------------------------------
#================================================================
# FUNCTION: dns_mode
# DESCRIPTION:
#     Processes parameters in DNS / Subdomain mode.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
dns_mode() {
	while [[ "$#" -gt 0 ]]; do
		case $1 in
			-h|--help) dns_help ;;
			--usage) dns_usage ;;
			-u|--url) URL="$2"; shift ;;
			-p|--programs) PROGRAMS="$2"; shift ;;
			-x|--extensions) EXTENSIONS="$2"; shift ;;
			-fc|--filter-status) FILTER_HTTP="$2"; shift ;;
			-fl|--filter-lines) FILTER_LINES="$2"; shift ;;
			-fs|--filter-size) FILTER_SIZE="$2"; shift ;;
			-fw|--filter-words) FILTER_WORDS="$2"; shift ;;
			-w|--wordlists) WORDLISTS="$2"; shift ;;
			--auto) AUTO=true ;; 
			-d|--domain) DOMAIN_NAME="$2"; shift ;;
			*) error "Unknown Parameter Passed: $1"; exit 1 ;;
		esac
		shift
	done

	input_check

	OPTION="dns"

	info "Initialized DNS Mode"
	run_program
	success "Completed Subdomain Mode"

	exit 0
}

# ---------------------------------------------------------------------------
# Virtual Host Mode
# ---------------------------------------------------------------------------
#================================================================
# FUNCTION: vhost_mode
# DESCRIPTION:
#     Processes parameters in virtual host mode.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
vhost_mode() {
	while [[ "$#" -gt 0 ]]; do
		case $1 in
			-h|--help) vhost_help ;;
			--usage) vhost_usage ;;
			-u|--url) URL="$2"; shift ;;
			-p|--programs) PROGRAMS="$2"; shift ;;
			-x|--extensions) EXTENSIONS="$2"; shift ;;
			-fc|--filter-status) FILTER_HTTP="$2"; shift ;;
			-fl|--filter-lines) FILTER_LINES="$2"; shift ;;
			-fs|--filter-size) FILTER_SIZE="$2"; shift ;;
			-fw|--filter-words) FILTER_WORDS="$2"; shift ;;
			-w|--wordlists) WORDLISTS="$2"; shift ;;
			--auto) AUTO=true ;; 
			-H) HOST="$2"; shift ;;
			*) error "Unknown parameter passed: $1"; exit 1 ;;
		esac
		shift
	done

	input_check

	OPTION="vhost"

	info "Initialized VHost Mode"
	if [ "$AUTO" == "true" ]; then
		if [ -z "$HOST" ]; then
			error "Host name empty"
			exit 1
		fi 		
		auto_vhost_scan
	fi
	run_program
	info "Completed VHost Mode"

	exit 1
}

#================================================================
# FUNCTION: run_program
# DESCRIPTION:
#     Processes parameters in virtual host mode.
# PARAMETERS:
#     None
# RETURNS:
#     None
#================================================================
run_program() {
	case "$PROGRAMS" in 
		*"gobuster"*) run_gobuster ;;
		*"ffuf"*) run_FFuF ;;
		*"feroxbuster"*) run_feroxbuster ;;
		*"dirsearch"*) run_dirsearch ;;
		*"dirb"*) run_dirb ;;
	esac
}

###############################################################
# Arguments                                                   #
###############################################################
if [ $# -eq 0 ];
then 
	usage
        exit 1
fi

###############################################################
# Global Flags                                                #
###############################################################
# Arguments
URL="" # Target Host
OPTION="" # Scan Option
PROGRAMS="" # Enumeration Programs
EXTENSIONS=""
WORDLISTS="" 
AUTO=false

# VHost Arguments
HOST=""

# DNS Arguments
DOMAIN_NAME=""

# Filter Arguments
FILTER_HTTP="" # Filter by HTTP status code requests
FILTER_LINES="" # Filter by amount of lines
FILTER_SIZE="" # Filter by content size
FILTER_WORDS="" # Filter by the amount of words

while [[ "$#" -gt 0 ]]; do
	case $1 in
		-h|--help) help ;;
		--usage) usage ;;
		-u|--url) URL="$2"; shift ;;
		-p|--programs) PROGRAMS="$2"; shift ;;
		-x|--extensions) EXTENSIONS="$2"; shift ;;
		dir) shift; dir_mode "$@"; break ;;
		vhost) shift; vhost_mode "$@"; break ;;
		dns) shift; dns_mode "$@"; break ;;
		-w|--wordlists) WORDLISTS="$2"; shift ;;
		--check) check ;;
		*) error "Unknown parameter passed: $1"; exit 1 ;;
	esac
	shift
done

